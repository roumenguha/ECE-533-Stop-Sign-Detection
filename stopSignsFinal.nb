(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    198296,       3835]
NotebookOptionsPosition[    196079,       3758]
NotebookOutlinePosition[    196421,       3773]
CellTagsIndexPosition[    196378,       3770]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "ECE 533: Midterm Project 1\n",
 StyleBox["By Colton Bushey (CB) and Roumen Guha (RG)\nFall 2017 \[LongDash] \
Professor William Sethares", "Chapter"]
}], "Title",
 CellChangeTimes->{{3.718730275226935*^9, 3.7187303380851483`*^9}}],

Cell[CellGroupData[{

Cell["Finding Stop Signs", "Section",
 CellChangeTimes->{{3.716383013551982*^9, 3.716383035093327*^9}, {
  3.716383830347229*^9, 3.716383833159194*^9}},
 ExpressionUUID -> "b60a551e-8585-4da6-a652-aa644b804978"],

Cell["\<\
When driving, stop signs are everywhere. The intent of these signs is to help \
the flow of traffic and avert accidents. How easy is it for autonomous \
vehicles to locate stop signs? Here is XKCDs take:\
\>", "Text",
 CellChangeTimes->{{3.716383080499196*^9, 3.71638317987906*^9}},
 ExpressionUUID -> "2cc1e3c5-1b8d-4786-af33-b67bfe39944e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Hyperlink", "[", "\"\<https://xkcd.com/1897/\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.716383181647771*^9, 3.716383222835891*^9}},
 ExpressionUUID -> "9f8d62d3-c793-4eeb-8f83-b1e08f446216"],

Cell[BoxData[
 TagBox[
  ButtonBox[
   PaneSelectorBox[{False->"\<\"https://xkcd.com/1897/\"\>", True->
    StyleBox["\<\"https://xkcd.com/1897/\"\>", "HyperlinkActive"]}, Dynamic[
     CurrentValue["MouseOver"]],
    BaseStyle->{"Hyperlink"},
    FrameMargins->0,
    ImageSize->Automatic],
   BaseStyle->"Hyperlink",
   ButtonData->{
     URL["https://xkcd.com/1897/"], None},
   ButtonNote->"https://xkcd.com/1897/"],
  Annotation[#, "https://xkcd.com/1897/", "Hyperlink"]& ]], "Output",
 CellChangeTimes->{{3.716383214953569*^9, 3.716383223509144*^9}, 
   3.7182246973854103`*^9, 3.71861970994376*^9, 3.718641460496621*^9, 
   3.718649363163622*^9, 3.718663018544595*^9, 3.7186757150391765`*^9, 
   3.7186761286475997`*^9, 3.718676765663473*^9, 3.718678104495408*^9, 
   3.718710154540763*^9, 3.718710381852906*^9, 3.718714194713186*^9, 
   3.7187286268441744`*^9, 3.7187292619810467`*^9},
 ExpressionUUID -> "cfdae9d4-6a14-4b86-934a-718788a4004c"]
}, Open  ]],

Cell["\<\
Your job is to write a program/algorithm that searches images for stop signs, \
and reports how many stop there are (if any) and where in the photo the stop \
signs are located. In order to develop your algorithm, there is a data base \
of images in the folder called \[OpenCurlyDoubleQuote]stopSignsTrain/\
\[CloseCurlyDoubleQuote] which contains a collection of images you can use to \
develop and train your algorithm. Download this folder and place it adjacent \
to this notebook. You can access all the files in the directory with\
\>", "Text",
 CellChangeTimes->{{3.7163832524365473`*^9, 3.716383395422593*^9}, {
  3.71638348264896*^9, 3.7163835066401987`*^9}},
 ExpressionUUID -> "9a2c8605-62c1-4ace-86b1-5642209c1694"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"allPics", "=", 
  RowBox[{"FileNames", "[", 
   RowBox[{"\"\<*.jpg\>\"", ",", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
     "\"\<stopSignsTrain/\>\""}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"images", " ", "=", " ", 
     RowBox[{"Map", "[", 
      RowBox[{"Import", ",", " ", "allPics"}], "]"}]}], ";"}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.716383513769103*^9, 3.7163835150632877`*^9}, {
   3.718312799802449*^9, 3.7183128153301487`*^9}, 3.7183139186927276`*^9, {
   3.718316811283273*^9, 3.7183168601462154`*^9}, {3.7183169730567265`*^9, 
   3.7183170025349674`*^9}, {3.718616051096525*^9, 3.718616053162135*^9}, 
   3.7186628934530864`*^9, 3.7187102147260027`*^9, {3.718728580363163*^9, 
   3.718728583914605*^9}},
 ExpressionUUID -> "5c4fbf48-7c88-4cc8-8a56-0f905264158b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage20.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage22.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage24.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage26.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage28.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage30.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage32.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage34.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage36.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage38.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage40.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage42.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage44.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage46.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage48.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage50.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage52.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage54.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage56.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage58.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage60.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage62.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage64.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage66.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage68.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage70.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage72.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage74.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage76.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage78.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage80.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage82.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage84.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage86.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage88.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage90.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage92.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage94.jpg\"\>", 
   ",", "\<\"\\\\\\\\userspace.cae.wisc.edu\\\\people\\\\r\\\\rguha\\\\\
Classes\\\\ECE 533\\\\Midterm Assignment \
1\\\\stopSignsTrain/\\\\signImage96.jpg\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.718710215510994*^9, {3.71871031204275*^9, 3.7187103165093718`*^9}, {
   3.7187103733254957`*^9, 3.7187103819204135`*^9}, 3.7187141947831774`*^9, 
   3.718728626915223*^9, 3.7187292620280776`*^9}]
}, Open  ]],

Cell["so that, for instance, ", "Text",
 CellChangeTimes->{{3.716383517558908*^9, 
  3.716383520622863*^9}},ExpressionUUID->"af6a2362-6441-44f6-815a-\
f654e830d22a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"allPics", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71638352292006*^9, 3.716383532542272*^9}},
 ExpressionUUID -> "d9a266d7-7902-4731-ac13-72dd3cf5b8ab"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
5WZBcXleUemZ8xdupN65m5F+K+12Zu794vLCorKC4or8xvbaW/euVNaX1NU3
nzt/8ebta+evnriVcaao6saDhykpN75/Nf3HNzJfK6w7nVd1KrvsZHrhsQ9S
vvvG4T/6xtu/93vH/vxPTn7/O8d++J33vvOH3/nfSkpzz58+jh0b+eK//rcv
/un/0ukMrV29MoPpya9+tfXLX/7NX/0sEvSEfO4vvvhv6+uraWlpbe2dt9My
KEzuZ7/6O65MnXLjbmVbX3ZZfUMfIqeisbq1rbm37+Lt1Iqm5rKGxpq29u7R
sYf1DYVV1QWVVen5BbAidY2MsiTSoQnM9fSMu3kP7hXkXU2/k1GYe+jU0XM3
LhSWF9zNvDVBHMORRs1WOQLZ0dZezqCPUSkgaxeTi2FycZDPB0baKmuKOHxa
VW1pY0v1rTtXMrJSq+tK+odbc/JTaxsL84pvV9Vno5DNbNaYWIrn8FB09ihf
guUI0Rhit9rA4vDReEJ/f1+NXEIVMjFmNY+E6q1t6Sqvb9LZbWqjVqIRSnVc
o1vMkox3DJf0jZcNYSsGJsoaezMyy05fyzoAHE15LbP44r38M12jJbezPzx4
/LtXUj9EYPssdp3VbtnY2uTwuG6PPRCye3wGp0fpdwonQyqTjmoz0fNyU4YG
S5isHouDbnXTDQ6y2U3hKQdKGi5lPTxe23sns/zE1ayTt/PP6f2i2Z2gxiOU
2Nkav5itI4jsNJJiFCPqKR9Mv1d75kbZ4bcu/eGZ7B+LHcwJwQBdMyFxMgC2
EYuXDnFMmF5SbSu6VOahcszj44L2YWZdF+FhWuXpC/ffbBzJFJnHu1CFQu3Y
BL1pnFw/Tm4ksjuHsTUgeO9ENVuDVnpZyTcU2LmGiFpsEyicMoGOC5nI6DYo
TEqlWaUwyeVmuVDPE5kFCrdUZOMyDTRHyGV0m1Oun7t8+1xRRVZw0vbk47mn
H8/GJg1M5tAvPl/+5KO5mZjZYRbMx+3ReOTZR8+XVpbnFxdsDrtEJg0Ew3KF
Ku1eRnZOfkFhaWHRw4LCh0XF5WXlNZVV9SWV5TfT7pTVVOFIxJX1td7BgeKy
h/mFBTm5DwqKCgsKCsbHx7lcLgKqYLFEKVco5NprV28f+eDEqZMpd+/eO3Lk
w6tXr168eD7j/t2Ll85ev3HhfmbqnbQraelXUs4fsdiUNqurf2DoxKkPT549
lFt0o671fmHFuczCI/lVJ87e+PP3z/zBzay3cstP38w6ePbGT05fff0/n//e
/3rof//+6e+NkDt/9tnyT9diX3z++IudpS8+2f7i//j8i435f1iM/O2c/4vP
Vr/4Lx998avNn+6sbC5OcciY7pa6rtbG1BtXz545VVtbT6Ix55bX1h5/PLf2
NDy3Hn/0eGr9o9WPf7W4/vTTX/7dr/7+nx5tfwzj6s4nG08/2/n4F+tPfjq7
su3wx2EMTy/PLG+5glPeyKzBFe4YQkOib+zq7x5CllRUw5I1jBjD4tFmi+7X
v/45j03q7a73uXRCLhEz3o1A9yAn+tC4wc6exuzceyOIgfLK0jHk6MPy0qGR
/pzcTMT4cENzFSS1ssr8a7fOIhFDOByCziAwWSQmhyyQsTgiGhI7VNVQOjjS
XVlVLBKxRgZ7DGp5b2tzV0N9cVl9cXmtWKEZx2LQ+HEiZZxMR7AF6P7Rahyl
E4Gtr2hMu1+QcuP+0ZQbbx+/+ON7udeyim52DFXVtOYcOfOjw8d+cO7SB2ar
yumy6rW6WDA6PoZAjQzmZqWeP/P+9StHi3OPNVRdLsk7nnP/YHHh8csXv3Pz
1o+q686V154+f/3PT176o9yyQ5VtKXcL3zx985vHrvzBm+9/85vf/QZTNIYm
t+eXX69qzSyuTe0eK6vpyrxfCod9ePr2Dy5nvX7x/g/fOfsfj9/8k3N3fvLu
qW8+qDqXVX7m3J3XarrvNPSnX0p/88aD9+4UHs6uPFXefv16zrtpxYeBW3nv
peYczHl48n7+kezCD2ubrvf259y+83ZV1eXu7szW1ntp9w4Vlp6ra7nT0pNZ
3Xy7rOEWWzDMEYy1dxZVVabfun68vvJBTWl2Q0Vebvq1xsr8krzUtNQzd1JP
5OZfflh5+1baB/cfpKdl3rl+6/zNO+czH1wvKbsbmdQ/fha1WtkqFS4e1YSD
iqVZm1pGclqEdXU1165dkUhEm5vrIyMjDQ0Nf/VXfzU8PPrWW+8cP34y5ezF
kyfOnjl9PvX2veysvMz7D3IKHmTn54xPoDa21tVa1d17dw4cePfo0Q/ee++d
UyeP30m9dfvWjevXrpQU5F+5cD4FjDp98cMjJ27duJNy5sKxo8fffvOtixfO
pZw9efPG5aKi7Pz89IKCjLS0y3n5d/IL7m5tz9GoLJfLU1Sch0D1INFtpdU3
T1/6y0u3f/T+yd+/eOcv7xUcSH3w7sXU185e/+G5G2+cu/nW+x/++QeH/7Sv
4f5/2Qhbhho/FRAXOus/H+3+ZV/z3/S3/Lyr6gvayD/gu36JbvgVsfkfBYNf
/Prznflo0KLurC/7wZ99szArIzsj7cqly2+/c/Dg4WOnLtx4/+TFI2evXblX
cDGt4KO/+ae//69feELzl25kXriW8cGJy+8ePnv01NVDH164cisbJrCZX9qQ
lV9V09Q3jmfPLj8RqT3/4Q++/8aBc28eOHvw6MWUi6k/ev3A9Rt3Otp7VArl
4801iPzy4lyzRkKaGOpoLH9QlHE/905ucVZBaV7KpbO376Vm5+WOIFG9g0NV
dfWwwOUWQs4vgct+7nLK8TPHDn545c33zx04funQ6Wvvnrx4+Nz1Q+ev/fDw
iXdOnn/7xLmjF26cu5Fx7Mz1tIzSy1czC4oayqpab93JbmnvO3D4g/cOvnvh
4qnLV0/UNuTlFl6rbcxqbM2trM8oqkq9lXH6WMobh0//+PSlo2cuf/j2Bz94
/8RrJy+8c/biwZTzH1y/fv7IoYO3r95kERhqkRw3OpaXnnrt7JEHaRd++K1/
11qVXp57uaLwWkdTlogzjJ+oHxstGxl9SGd3/t+kvAdwU9e77i1CMWAbV9x7
t+QqWZKtYhVLlmSrWtW2LKtavfcuuVd674GQBqkkpJCeQHpIgRRI78k/CWmE
BEL2twj3njlz53wzd+ZqfrPm3WtvazbSftbzPmts9FZGfevqPjECSy3o4daw
JIiTJ/fcdtvs3r3xZ56//a1zj7x/8am//v7k829ePHfh0bvvn5cq0UxBVb+4
uk9UzhCV9IoKGbyyrXtNz7+6Z9MuvclF2XPY+eDjcwtb1Ux++aPPbEzOyfiy
eounxxFg0DklYLKPV7/7gG/PPq9GQzzxwMLGhTGFrMOgJOhGumK+gYiHv3e7
85ETG86/dfzzTx//z3fPf/nBqa8vPnn+xeMvPnLowGJgS9wx5x7bGnU8defe
D54/eebEba88ettzD+598r5tn7/32EdvP/TyKy88/8ITfWwKndFltcn72Bil
hvnMM7cdv2fD9Izh/LlHP7z49GOPHLj/2PaXX7hfLBpAdyAJ+C758CB47IWC
gXNvv7MwN19cWILrxHP6uQx6H5VMB6DaMcWFZW3IZmxXB6YTtbA0G4uHBofE
cEQdCtmC7mjDdaFbEQ10CpAORsDpYzPpIj4Hh8a3NyHxGAIZT6KTab3UHhad
hsd29DN7dm3fEA05pWIWEd/aS8OWlWRQye0bN2w9derJvft2LiwlPvvy7IVP
ng2Nj+hsPUojDkvJQFOyWOJ63lAbgVHe2pXXJ0LymnO1uBro3ec+2jZ1UtL3
GA3/FpP6Hb//ewYZGpX8I2L8xMJcwFX9MID5cajrYn/Diw8f++bd14RU3AiX
QUa3NlWXNdXXkAlEBKK5A0sgUvrQ3Yw2HK2NwHQnN/wOQX/9DWn1PiSaxhUo
uyn8DmxvF6EfhaG3oaigbm4j9XHkLPbwiNLOG1AJRJrnX/7skSfPw2B5bWiW
wZooLmvuwPTw+UNDg6OjI2qv0yXicrkseszvNKrlToNKPMzDkTHtGGDTg0KZ
qBt8Bz00OovN4YspNFZTG6qxuQ2Dwzc2t1TW1jQ2NzUShopb2MWtfUWtfWk1
hPQ6QlYTZW0tbl0jYUVpex1BmAenZlXiq9r6m/ESlWX+zrsfMZr9L7369p69
B0dVCqvNoNZK+9mE5tYiJKacQG5ksNFEKqKoKrWmKV+iYBVXFxRW5lbBi/NK
UytqcmobC8orczHoNiyqo7a4mooljQ2r6F14QQ95mEvXD3NCJuu+pU2Ht+7Y
ubCweWpq/9bN9995dOeWxYXZ+PR0BOQ+hVpkdarrW8q8EdOO/QtHb508dsf8
7Yen3n7r4R/+c/anH986f+7k2TfvP/vmvU8/u4cvgQ8pkUxeCaEnnScr7xMV
bNymuPL3mQ8/O7b7gGHzdvXEjMgb7HV4KCodso9brB5Dbd89BhifFh44bJfJ
G+UKrMlEk4pbDVrStg0mr5WlHcKODrTyqeUjvCYWoVAtRk6FpfcciT/+4NKp
ExueOrZw6s7Zp+5afGjf5EbPqJFNsAl6Fi2j86aR3RHbvHXk3q2x2xY941b+
08cXP3nt+Pvvv3nw4E6tVjaq5OuA2XHQ8bjOYOwLBIeG5cQnnzhwz/FN992z
7eiRRdEA0eIPMgTC+NyCymCzOP0Gs+PUE89u2bQdUQcn43BzyZheIcU2VysG
aEMcYkd9Prwpr72jnDtAMdo143PjWAoZSaTUtHe1dTMwNA5YPLF0Zg0SKdOq
6QP9PLlwx7btI/Ihg17jcVowqKaJhL+HjO3ogJeW5W3auigcElL7mXVIZM+A
mDwgwTC4yuQ0Xz02Oz557tQj0LcfXfn6tROPbFk67OebqUhKFYeGUlIIPjpr
uK5JWtNowBErHPnnL+69utnzCwp1ndz9mrDziAZ1x0jLW/x2yDnyh6T7Qzr8
upQEDeC+GUCeVSA/QuChF549feoQjFECU+PaJuw4jbGumYXpGsL0G6rZikrB
SNegtrdPAl2CoF+gz3+B6CJ9N0cp0QUYEmNXn5wq1NHEejx3FM0cbKeJewdN
HLVb4Z6UWqLDjiRrSPvS+1/d/8zZVfmN7RRZdQe3k6Uj8Ow89ThblWBrxoXm
mSHP0pBnQWBJMtTePmWAKnPAyTKBKYERjPWqfHiJkWeKSpyTKI4CJ9AgGUMN
eHYTnluNpHfSZbVUdafYi5cFClGiss7BUrS0DCup6BQVIdnlaHZTj5A2pIet
ycprQRa3oeAkMkdr6hYPU+S6O8+8eeL8Z3RjkGFNyJLb+cGN6/EDa5qoK2sJ
69t7sxGkZXmNUks8BYFd3diZ3U7PhPeUtXIq4f05OWh4Na2lktRYgikrbKMx
VaOOedygj2ycS+8e7R4Y7B8dgxNp6xtaC5uQ9TiyOZp8+MWXVxUU5VRX59bU
5FRXFTc2ckeG0DSKUD2ag0DIHI7w9m1ZCPjsbUdHo9F6Rm8tndYuFMEqKrI6
sU0iEWpE3iKTtg4PlTAZzu36+945evCZ7ecvv3bqwgMvfHxq4x0zQn0/c4g6
tSX2+vsvfvDZ2yDPgkg4Mz+h0o6gWLU4fpPMwvLMaiIbDP3DHVRBA3uwxeBm
Dmuxci06EOPqjNgeei6y45bKaphALsH3klfnpMPWLCuuLa2GV4nloqdPnzr9
0pNH79xvsakksv5wxLZv/8a9+zY8eOLohY9Pv/LGwwIxweKQgpHJRvFFeE9g
VGvgIVrz6hHZi5v8BoswOWXpYbSoLLb8qhoyi6sxOcKJaXw3va6+qb4O0YXF
tcHhlC4MoxuLba4RMvC4loqmikxCd0MDIg/X3YwhtOGp+AZke00risKVtOBp
DLECjiXVINGtxO5+qbgZh6prR9CoPapRJegYB8UDdCpRPSprrCttbq6uqi4+
fPTA5Pw0EJfB42GIZTgWd8wfK5EO5/X0Yvg8m8fxxJP3KXVc15R+bEozeXyu
qhdeR4ITWURid2dTY80Aj8nh0E+9NP7FwxMXhKT/VFZCaPQXfZ2vKQnvyHFf
0VuhEc6VfvQX1LrrPCzU236J0fQxHw4xR5+phkMfvbVtVxzWkFnOIOAYfF6v
ioyW0vr1eJkJp7a0CWQb990G/XYdugzdfuL5fplBbY9bQ/NyY3DQGFA5E2A0
hGbZCovaM26OLU7uPGpLbkxuO2xNbNC6QxOb93z+2/XpHUczy5FYhqJvyN1K
HkIx1F0cA23QI9DHRdaJfm2gc0DTQBUQ+AaS0Nwrd2tDm00Tu52LB+8+/f7R
Z95h60PW6T0jnmkcT43nqGhiI0NiZg87yCPRfsMsRujWJw8TpQEU28wZm6rr
HmqiyFvpcgRZOGiPFDZj8hBtNV2EKmynxGDhqvTg+Uf3SxJ77nj4rU/007uw
EhPXOm6eP9glMpZ3clt6JI0ETgtJQBNpywiMetpAI1VSheFVtPRX1vXWVJKb
q8ik1j5SK6u2GNUIJ9H4BmVoe49hiunZvKawgTNikYx5uxiiejQVS+cnN+55
5b1PM0vrWgm00oaWNjwlr7I+PrskGdUy+OLCJuLq0paFQyfAutFCl6rCi4rg
IkPrA3dVThZiBi2qyZ2F3YJGnho9bCuhiu0bYrqki2eWn3jjyde/On/263ef
OX/mna/OP/TciadffXLbwc13PXD43Q/f+Pjzc3sPbka0VqIZ2GXZt6zKX5lZ
ll6NLGdJqBr7IKUftWXP+OPP3A6e/GdfuGvTVp9ujCGRdlqsXHfcqzAp8XQC
loKh82gEWpd4hH/gth1uv1GhFro8Y3QmNp5wxOLWySn3nr1zr7xx4rkzxxRq
xqiGSWe1kGmNREodT9jZiioor16NxBRPzdk2bPGH41pcd7VQocb39omVWhpn
gNTLBuFXIBruobEMY2abySzisR1GjdukcupHiKh6ckcdGltFJDdrdNJAzLMm
IxWFJ1I5AhSZSWKL8UwBEBeBxeMODvdJRBgKEU3GjY4oJCIxn8dRygclQu7M
ZJREQFOpuG4SdvO2pduP3cGTSRXAyAfE3ZwBOJ4Kyy2HwdHZWGJ7Lyu/onRU
Paw1KUbNoyPuMZyM3WfTikJ2UcDWZ1a2ciieTePQM9s+9wg+JzRBKCTU2vJH
Z9OvbMxVbuff+CaIgf2N3Pgdre4KE3GVUPMHofrnnmoISYN6uN8MyqAPzi4Y
R7sQDf1k5jBTrhfaJNwxlmiMOqrvN1m+/fs6BF5/Xk/Mb9NY/Qu7bp3bcdCT
nLdHpjzjC8747NTWfXc9/tz22+89evKpjYfu3Hvvw4DbH3tmyGBEdBFUNs+r
7386uWV/LZJa2U7B9g4WIUiA0taeuq6+tl5RF0+OF9yALrYQuFqdf+nESx89
/8FPUwcefPnzP1756s8Tb3z25nfXdxx/dnb/g/c9+96Be09P77gnPH+ryL1l
8tZnF+96eTiwyzhxW59mnDocoskDQLasES+WNWIIz7X3cJblFtdgcCUtSLpA
oLE5wFcsNzpV9oDOnXj49Pl9x57C0GUUvoY9aIFjmVKNW6H39YtVgfENRKGC
ItLg2YpOhqKTNEyhjPSTFUBW+FqChCJCVXUU59Z1kQdEY5EqsgzB07d3cdki
I6B/QIenijvwnOTsnq/+cw3VxSLRhTdaaGxPO5oSTy5F4ws8wUhJE6cI3q/1
bE9sPQHLQnJU4xLrEk0ew4m8nQPuXs2Ua9ODhrm7PdtPivw7DQvHghvuSu54
wJTYZZvYZYwsjQWmaeIREldg8vnmt28k95G27l188LE7Hjh56MPPXvntyqcn
njnz1GtnP/7h0hMvvnrHgw8duefeo/fcd+yBBx4+9djeQ/s8PrfBqF1YnNmy
eVGrUXjcNoVxsFdAaSc0ocmtGFJLFaKoobW0T0BC4+q4QiJvgKg3i4CheP0q
NLbc7hyc22DbuM0zNEriiToAI2rqsJKs1NEVmh5QSOUEo427Y2/Y4hRIhvEU
3kB5E5LUx+fJRgVDqvsfefr1ty7s2nXo99/+uvzbH4uzM8phqU4hM6sHZXy6
VScLR0x2l8rrNy1tWTj5xKNdlB6ebGRAruug9NW04zrpHKZwsAHZgSFT6Nx+
vcO6f/9+j8u9bevm2ZmpRCT44H13T0/Ekomw12MPhn13HL/zhddfO3jX3cNG
i1CtZ0rlZI6VxjFJZHaj0rs9svHJrXdM8sd2qIM+njZqCFZWIuBYIlUk2nfn
7fsO7L56+ZffNcwL3fXX+johJhFCNkAdcKgT0AB1I/7srv2eUvU9u/6nvtpL
3aV/Esr/plRBZMI/+K5vuvE/O83QR++aacTm8pKdG7aeefzMyWOn7r//iVtP
PHLvS6d/gP6+Bv0NXb+2Zc9+jdmmMlsHNTqtzWFweQxuL3hcpWotVz7STiKj
KFS5yWwOh+MbN6pdrpL6yhUZqRmFBVgK9Q8IOnrfo5G5LVKNfcTsU9qCOl/C
npgNzG2KbtoR33KDiU1H3OPbN+y///tr0Jd/QPEdd07tu3fz3U8dPnX2PxD0
5DvfexcOe+dundpx/9zuE4HZw0PBHeb5ux5794/A9ofjux93Ldwd3vKA0rtF
ZplROGbZI06VaxxJ5cFWZYC0V9rUTuvtEUnEJrNVJJSNyLVed8zrTHxw/uvF
2d1MmlijdNbXoth9UpPJIxAMz85uwvUOtOJZJOYgg63u79eMSpx6qdPAH1Mz
hkIKK762PXN5eheWhqbw6EPm7kELX6BrbaN1oBm79xz/5turn37+y7ffXPnn
OvTtN5e//fq3P/+Afv7p2k//+ePE/afikRkijt4jMNsiO6a23zvm2yQeS/CU
Ial5UmiYIIrtYvt8l9CG6AVJ8bbAjgfZ5pnkoSc2HbjomXjK4L/fnXhoac8Z
38TtHaThyqZuqz8xqNGaPGaw2k0seEIJ7cdfvXD02NzM5j3z2/afePLM8Yef
evTZV+579Onbjp146ez5YGzS7PDs3HNQb7aJB+Vmi8NssQkGRJFZ16hZLFH3
aW0StUU0rGNrzEKrbxiYjM7MAx5ksPLi4zq7S2xziiZnTFa3wBse1Fv7JXKc
1sR0B6VgxuLig0l/dBgUCi11cYsDjEY7p72b1kFhYHpYTRhSWxd1emnnMy+8
7vEnjh07cf99D/E43PbmJodZvzgbnxsPAMQSZnc3EtnRSOulxKcmKhsRDL5U
qjI5QpMmT8wF/qnRSfAEbty5G0+h1DXBaTSaSqVKxOLRSGhuajzodW1amp2b
TkbC/l27drh83qWtW53hSE5ZxbqS8n6Zws0OqIgaYZtgl31pUeh+1LzxLcfe
c9Y9L5p2POLcsdc+L8axzCJ5SDIEvXvx3MZtn3dWftRR+isL+UN33e/YGoiK
glA1f6Or/mY2f0kp+6Kv8j9C+Hf8uu8YFb/3VEK9dd9yWr6kNl4eoHwl7vt6
3A29fwbdUtIv7P3510vQdejXny//fPXarxD0E3Tlb+gadP3qDz9f+vr7765c
u/rjb79cuvzbF99988lXX1z44tNPv/v6zNnXHnnuqZPPPvnkSy888eLzr39w
/tgjJzbu2HDk7sO0ftqzLz7/FwR9c+mXH36/8vXPv37z8+Uvfvr1wlffvfbe
B4+cPn3kgQe2HTm0uHeXP7E5PrvbP7F1Yded244+7Jvbo/bPasNL+sS2wOY7
Fm59dN+Dr9z26Dubjz4T33Q8vHh3YOdD/h0ntBOHDFNHRgI7eIYZbXhPvzI6
ZJsbNk/K9BGRykXhDJchOhqQ+JpWtJjPFrCZ5E6MVjYkZfJGWCKrVAv8UoDr
60P16PijMqZQK1V9cPa9N1954/C+QxNTm0dVNqdr0mmb0I/6THL3KEthF+lG
SewxBo/d3ompbqR2kts7iASmqK6TRgSNVCeZQmbOz2x479zF336+cu2vf65e
vvbTd5e++/Lbi+c/+OfPq+CDffTBhyQcPrqptQlPluktgZnF9fUI5qBSOGbB
cYQSswMEQzRXiKCxsppQ69uwvRojRjiIlynKEM4V64S55aMItEMwspEljsPR
4g6ScMwWTM4t7D285+Dt2zbviU8umAyO/vFZ9bGT9w6PKawBhyvqBXhiXoPL
KB8b8ScDz732/KBmSCQXzG+Z2bBjYXw+HpkMTm5wa23CUSN3zCkcGWPJdUy1
mS3X0IwOgd0nVo31qg29o7oe9Rhdqe3Rm/tMDjbA6uaNaEgGW5/eypKru4dV
xFEdBaAco8oUOHBWIu90BUR5tfA6VFdFM7qrl9vNFKzKKEjLKV27rpDG4B84
eNvJhx8/fvexo7cdAnLYsXXx4Qfv2rVrcdu2+YOHdm3dvqkFidLbXaMGq1Cu
U+gdSqNLpjJNL21/6szLFz75nECm5BYUpqSklJSUBHz+ZCI2NzUZCXi3bFgI
+dyJePjee49LB2VtHWgCrTclK6ewpo7MFRTC0vobKSaOStrJ9PSPHFAGt/Vo
NnTIDvbbJ6hKDZZ5a2LGyWJB77wJ3XX0cQH3S3zN97SmH9ltnxGrfqHAIWrb
n63lf/UgLglaLjIqgW39xoNf4jde4tRfplVBzObXWYV/abp/ZXf8zCWdFfRA
Tx77/LWHcwpuCU/4frr0HQRd/we6fvmfv3659tsPl759+vGTu3ZvO33m2ev/
AKFc+we6dvXvK39evfz9pe+A9K5BV5e2LZld5sN3Hb4GXbv01y9/QddATvvt
jx//gf786ZfvL3zywU+/XQLCvAZ++H8D3ujXa39c+vO3X65evgxdef/j799+
/8tDdz5scMVAz6ZwxHokusZuHoIiwbA19GF3J8dQh5ch6Ro001CBEtYxNUiB
tYI0vLKaVEOSl2HFVVgRnmdCECT1GE4bkd+IpmPJPDSRWVDeuCazQMplqaXC
8owMclOLqIvMqEcSC2vZdWhUegkur4ZS2YIpqstbtvr3L7/5++dfn3/s8SMH
71ErrAKOQsLVaGU2rdjERrOE2F4zWyREdcq7yWxMZ3NlNYVMr2tGNXVRCgvy
WpoRFeWlGamr165aXlVWLOZzLHoNaHg0wzL1sHjHxrmP3n3z1IP3KMR8Gh6D
6GwnsKjsYdGAaggHihExTSoQG9RIBrmTw5TaDLpYoBKHGYuHaaNDrX30epSG
wg3LdJsR2JGcCnJFU285nFBc2zqk1cFWwQIJ544Dc9v3JifmjVt2+/cciizt
Dfin1Ltun9h5dHzLoej8Lu/4Jmt0wRCZ14NDUO+5e/qux7bvvGPi+Kk987sD
95zcueNgYueh5N7bpjbuCm7aHdq+LwykGp/Wxac0Ns8AMKZgfMRg6fcGJVoD
HWhNpacbbGxgWyYHF4xAesCnQD2sIg0pwSLRxRUhB2QY8LPtZDpTqqhD4fNr
mjqpbCSOXgVHr1tf3tZB1IxZo7GJyclpjwc4jDMS9k1NRb1eq9NpnJkdV2mU
FodTNWZqwxJBS9lF7e+k9BFpbLsnZLA6gfPm5OZlZuXk5uauWbMGdIahoN/r
dMxMjMdCQaNO67RaTEa9UCjUm02+SESmUpo8Xksg4LCbR1VyjVXrjrvZA8y7
b90nIfdIOskgL/ZhOnlUwt275o/PeaF3njzORT8r6PqQ2nCJg7nC7brU03qF
2v5XF/wnVNXPfW2f81o+6a37k97yDxn+d2/LVU7rNWIt1IP6sb/mN0o1RG65
3o35uZ/xBJ0IvfLUq/ceqshbO5HwQ9BVoICvvvrinxsqu6Em6B+gmz+v/nX5
8u8/g1O//vLj+x+cu+/+Y99+9+W1639+892Xe/fv+viLj4DWLl/9/YbZgZz2
zx8XLr7z/gfvfPnVJzcldeWvP/59w/8FUOiVv37/658//4au/g3c7fvfDhw+
Nr9137DOLtW5uvmKvMbOlh5JVj1hVUkHlq3nquJUsRf0Zdg+c7vAUIQTWBeO
UOT+Zoa6gSyvwg4UNPaUNvfWIfuaO9lNKDqxR9DDEFbWthSV1imlA8N8dmlq
akNGdt3KNFETWtlB6S9upGZXELMqxM2dA+24+nW5Lzxw4qO33jrzxKnvPvv5
7iMnhkVjfObIIF/Xi2V31WNbcivRBaXNGVl9Lc201qb6kiI0qiM9Oy+zuLyi
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
lavB8jgT9Qho3Sceu69LRE/PWdmObWzDNFAYXYj26qaOWjSxpZPcjsDU1SOr
MorWrsyErcgC8QG2bB0sqywdGAds1ZrMgqKy+jqwzmfmZwLJpOesKarIRXc2
j6oHHf/utXK4LODy3UR8SVkmndHV20eoa6pYX5oNPCIle212eUFWaTFsxYp2
PLGhvTNlXQEMBoJg2rLlmTDQWBaXlDXAYStTgB2tzsprxuBhq1JveM2KVTCg
4RX/WswqWErW6uXptwgUYoVRBSQDhAbksyITtiz9RnFjJh2WV7W2tr24sD4z
tWBFZmmqTC+qRgClZhfU5zZ2IxC09gpCHVbQydYwmMN4oYY0qKUKFd3s4W7W
ML13uI8iY4pcHWJnh8iB4ppaWTo4QGBqlzqwQ27CoAPH16OkNpzS02NN8id3
6ef2W0LjXn/c5YnYnUGLxaPXmBUShZAj7qP1kRlsOk/E6eezxEMihWbEF/ZO
zk3Mzu+emtkWT24IhKYdwMDMHp3OqtboFaOqUZUSdFO6MZXRpLVY9Ta7Hny2
sUQYPDzJ8ejkVGJ6Jjk/N7m4ML1xcWp+JjEzEUpGPTG/FTx7iaB9Ku6eH/fv
3bZ4cNem2/bvPHJg14HdW7cszU0kwmG/x+d1+n0e0PWB3u+GpiLhcDQSiUX/
/8QFDm/WQFmgAIfRSDI1ffXqtStXrLhl+XLgYKnpaVkpq8D3uCJ1bUZuTkF2
di4Bh5dJxSIhTyziadQjHA6dz2eKxZwhuUClkY2Z5Cab0upUB8PWUNgaDdti
Idt40DEZcs6EXIBg0gQIxc0gMEai9ljEkYg4x8POgGss4jPEwqZYRB8Oq0JR
ZTSpTExrQ0FPNOpORBzxoDEe0IW8o0b9gFhKHZDQJbI+s04659RB77y8V8z5
em4c+vQCdPrkMzLOGwTSH7j+L7uZlw9vgi6fv+Ay/krkQp4o9NmrD82aX+dw
IYkZuvDunfeOX+qUQA88C7384gGl+H7l4A2hnT53ulcAPfZwVMsvq1zFZKOm
xu1Ts173nAshwuSWrl6eBsOQ4BQOFkVqbOqsEqv6m/E1jdgKDK0Z3lW1tvCW
2o5SBK4az0GTBF0ILLa0sXF9ZWlFc11WaU45ohRHRwMBtnXVATxhs9o4ePad
03v2b/no0/foTEpqBgyFbWjuqMktSS+syUvPT4OlLssqyV1XmANbu6q+rbWi
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
AVNZkA56LQEv89N4PY4nKCHH88STRbh4hr4VrtjMC1chkiJxeFxcl3B1IsJ3
CEnlMkgCU5IxbXbQ8cP76vZs27Zx9cY1tWtXLF66cPaMyeXlYW9p0O13UVaD
SiYsLsrNyJkwNmv8aGj40J5DB3cfMqjb4IFdBw3o0r9vp149XunW5eVXf/+z
Ht1+17f367iLgykj+oxO6YfThvfvnNK3y5g+Xcb27prau0dqn95j+vcZNah3
/x6vZY4ekDOsuzFtSHvz+RXZaRvHpZwuzr8wyfhh0PjZ6FFfvtG1feLoo/KB
d7Y7L7onfpIxtn3AmD/xBe2nt7T/+Wp7y6HP7fq3Bg+9x01t3zy9/dSSa7ze
n2b0bh/Rr3344CNjBn58fpfCJfjhb39cTTlOTVp4bdGa7SsWLdy+cOuW9Xv3
bAcIO7Zv2rxp7aGDe3fv2rpl87qNG1aTLaipXVazvHbR0iULAM7SJQsXL5q/
ZPGCmoVzp06pQqGKhP1TJldipwSxks9VVVlKDs6dM4OyGoMRd0m5v7I6UjW5
pLwqFEEZirj9ISfyC4/f5nBbrDa93qRUqEUiKYcvKszK4UOZ2byMLO6ETE56
RjE0fkKRRucwmr02R8TrrwqXTCstn1lWMQuSqARStVCmEWFHrOTLNVK9RUvh
Ah7y+CO+UFkwUlESLo/4IwGX321z24EMsFJp1BAMC5kR/As0YRsrPETk88KV
4E1wKKRUyK28hCl8QCiOL+bREnsoYguGmRo/FHWGzahROCmXi2bqsAPOYNgT
KfWXlQcrKkKV00v8U8PuyUFHdZCujlinlltnVlvnTDPX1jhXLrWvWWFbs9K6
bKl6zmz+pEnZJSVpFSFLedBcFjCV+swRnynsNQc8Zr/HGgm6gkGnP8C0W8V0
XLLHGRarZOEfgaijbDYq1rwIXxxOEbIkiMfj8PlcJEpEJpPBaNQbEBQYdDqd
BtJq1RqN6vTxA0cP7dq7c8PGtUtXLJ1bu3j2qtr561YtWr968eb1tds2rdy0
bhnuYntgz+ZTx/bjzPq6HedOHWq4cPzy+WPYwcETR/aePXnwzIm64/V7Du3f
dnDf1sMHth85uBM6W7/7/OHdFw/vvXx4b8Oh/RcP150/dOBM/b4DO9dfOrHv
av32m7vXtz9uuz9/5iG5ZHvmhNYRg+6NGtg2uOv7af2+FI1qzep8j9fv2rjX
H43r/UnmqHtjB7dkjnpXXnhhXP+jA15/R5jROrFfm3DwQ+WIy0P/oz21d/vY
YV+NH3uWl/lR0wGVX/oPP/3Hmoqq22v33t645+DmdSt2r9i5Y0vdgT0b1q/e
tHHttq0bL144s3vXtgXzZ0+fVj1v7kwIO7H7S5csmjVz+tQp1XPnzKpZOH/e
XJw5ZdrUyaUl4RJcnt3OSDhIUxa/j+lQQyGTt5stVr1Wp5ArRGIJjy8o4nDz
i4pzC4sm5uVnZeekZ2alYZtfkI3jAmGxUqlWq7UI1KxWGuUDgU04XFJSUmbD
JROFAtditxfHcddioYxGsy9gQXkuq3CXlrtQpAMhuqTMVTkpGIo4Ubw9Xtrh
NNM2g5XSEVksFqPRqIvesEPTeBUkIB6vF3EUc/P7/cFgMBS9hcNhFiLiTUAM
oIE47LAi9OEg5PIYXR4zI5cFcjqskNtOBTzOgNtB5HfZAw6aKGIvLHUWl3v5
UyKyeZMNyxe4Nq6IbF9XuX5lZMVi77xZpsmV8pIwP+gvhkIBTqnfHvHSAY/V
5zJDCJlDfkco6GE8ywcxTWYujz1aT+nAxaQjWbE5VDKHSggX4SvWvJA6QXKZ
CELqpFRIIJVSigQKIgdxV6OWazUKnVYZclvnTqvYuGrxptVLahfOXDRnytra
BXu3rdu/Y8Pxg7vOHa87eXhP3a5NB3ZuPHN0//WGM+dPHLx6/njz5dMNZ4/i
oSP7t5+q33vpdD1OPrh7M848emAHDuLfIexcOLH/0om6huPQIejC0UNnjtad
PLrv5NE9B3atu3RoZ9P+LY/2bGm/23Lc7dgq4LUPGvn5oL7vZg64ntn55rhf
fzb2d+3Df9c+rvOdlN+1je/6xwkDP+n5ZvvgAV+MGfhB8cirBX1vZ7zZmv76
x4X9PhvbpX1sv/aUga0jB2zMHfle0yGjT/nCP78wvbS0ftHqrdPmLp8/d8Gq
BSAFmISCfgCydcumjz/64PHbj86dPV1/+ODxY0fqDuxbv24NgFq8aOGc2TOr
KssNOr1SDsuXYSsVS4oKCnNzJhbk5Qv5AuwU5hekp43Pz80TC0UCHh+/IW0z
my16vUENmaLDc7Cj1sgNRg2O2+wW0iLpD7iZrgJPkxevB8EYIjGr3WaODgIy
IhzFXaQ82HrctmDAXVYarKyI4HIdiXhKSoCGjab1ZpMWJ+N/EcIx433s1if9
fBwI7fCcDpPJhKszCAI7pFsdCCpHbBK9RaK3kuitlNyiFw3SEw/fEhPm+b1Q
NOZyEuFpifASeMPkTeI9eDwU3lXQR4cCVDhIhQPmcMAYDuhLAvqIXxuVesEU
/qLpouVzVatrjOsW02uXOlYvca9a5J1WaZhUaijxaf0updeu9jh0frcphPjZ
anLZQJYdtAa9eA+wYgpfI7O4j5OyOymHi4bsHhtRHFxxFRTfA67YzEshFxEp
FSALHEmItBo5K51WQaTXKS1aaUJJuLkJZVAKTWoxbVC4rNqgy4ILS1XEU13q
m1oRTKi508rmTS+PqnLuzKo5M6tnzaqeNWfS3PlT5s6uXLlw+ro5k1eEXbsr
wu3Xrm4y6r8cOrg9bfjnaX0fpP7+vZxXvsp69YM3/3f72N/9ZcIbn6S+9uXw
zu1DureP6PnnMd3fT33zcXqntrRX/pTX54tx3dvTBn7Rv9vHY4efSBvafnTL
w8sHXvjfL/Qa0hNFTs0XagQCpUyo0MqQ0CMIspiNcBm7jSIlEAUmEO33iaIF
oMAdyFowfy6satOGjaw2b9wEbdm0Gdq9cxfRnl27ifbu3gPt3r0zobZt27Jl
y6YNG9atXr2ytnbpokUL58+fO3fu7PIST1nEXRp2RYKOcMCOkolUAioJOdkj
iIK8LrPbYYQQeQXc/og/XBYqLQ8zTU9hXyTgDs6buWBS2eSAO+R3hsuCVVUl
U0r8FR5bgHTdAVmACDQBLjgX/As7IKmsrCwQvRGwGPRCAYIVvhB4Mb4cB0oa
/Q1gCWLADSqB1wVD0ZOdAa8NWJWEqfISSzioCQXl4YA45BcEfEXhIGf6VPWy
JfaVC6RrF6s31Ro3raBW15jmTVVXBkV+By/sVoVcepQo2JwfDs5cdQI+R4hp
L3sqRHxM0BcFhyn/DkZ2p83+lDKbm46jKRk7rOJOI0yxinOuOLhYvjRqGdSR
L6NWklBmvSyhKL3SrJHpFSKliCMqzuXkZuRnpuZOGFuYPT6hlPJilYKjkvMU
Cp5CxZerhEgZpGp+sZDpyijkZhslxU4Jz83Jr5s17cvLF06N6/lOxqA/DHjt
o2G//SLvzT/lvNye8/Ifh/yofezL7SN/2z78la9Gvfbh+NceT3j109G/bx/y
+z8W9X178MvtGUPbh/X/cuzIWxmj/7JsxleXDg5581cD+3dGim/x0iqr3uql
qeg1NhYuUmZIgTGbDDhotZjIcTszEwKsBLsUkY2iifALQBaTmZUVkWBUlMWK
Z0soFFS4AOCtnlQ5c8Y0kLtkcU3tsiV1+3Ye3L/r0IHdh+v2HDm07+jh/cfq
Dxw/Urdn5xZo1/ZNO7Zu2LZ53ZaNazZvWL1p/ap9Ow/U7Tl0pO7YySOnTx87
e+bYhVNHzp2sP7ti8bptG/Yc3HNsz7bDa2q3LJ63avmi9RtX77zacGXl8hXI
CWCseIczpk1fvqx21YqV0dJnh1BUQQYAqSgrnzypGu9tUlUF3io+O74EEvdW
VpTh/UOIflkRR6MtKHdMyQ/5ALbD5zE6HTIbxS0rVfq9hU57ZkmkYNEi3aYN
rnVrqUU1yq0rHAxT1dIqBH72PL+tOOQQRjzqGLK8UawiHkcp5HUHoq/sA8pk
VIgrerPbn6ZLDFw21sLifOq/Dlesc8lxfe7AF6RWSQlfcYgZNbKEsuiVCUWb
NESUUU1kNaggu0WXUFarmqKY4ZwWWmO2aw0OPWR0GjQWpdNvNRhkcEm3TllJ
m0o1yrYjh9t3zjlRNLQ1tfeH47t/mtHpg9G/aM999bNRL/4l/eW/ZL7656xO
H2Z3ejv3jfdyX29PexWs/SG9++djerSnDm8fPrQtZdjbPqr9UZN0bL9X//0H
JqXI5bXpvVZdxK71UzqzxhnN5iGLWW+1GGjKREIpRBqIN1i5XTZSYwah7EHk
msnUSMVcSFkx9cAeb7SpxceGTHGKvfLjgs8WVIvebDUgm7LSJspusUXLiJMp
I5TDbXP5XT6YVEWkfHJF9bRJU2dMnj5nxtSFc2fVLkZSvGr75k17d+6o27vv
4L79h/YfOHbo6Oljp04dPXmk7uiB3XX7dx3AtnbpMmjdmrUH9u0/d+bs2dNn
YLLALSN9Ao/DhUFtWLf+aP2RI4frDx6oqz90+MSx47BjxMVgDYWUXDpwbSEk
4giET8N+LRXh6rJQRUkgAriinmvwe1V+n8hqypg7W79po2/5ctOc2aKahbLV
qwzr1pqnleir/MqIQ+K1CDxmoZeSAqtSLxUlywZb9THfc7Rzh5PJ2zzR/uqM
npDF1Fw4ozURhC+WI2f0i0sY8rGYfHe4aNoaa16EWZlcSISEmhmQpRQTqdRS
VmqNjEijles1iaVVSRNKKeGppHyNXKhTig1qqUkrB3GAKxmMZoPcaJQbzQqd
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
UYlnqYklz37QvNkiznKtMHa9cdH5bcubLqS5K5IHK6Ld1+bv37BUkPBN7PzP
I2ZNC5sWHDEzLvC7GL/JEb5TAmZMnj7x2y8++3z8+I8/eH/cWJindz74bMzY
d99//9233/7zG2+8/vrrr+Hfn/70pzfeeOOjjz6ZMWNWYGDw4rhlXI5QwJfw
uCKpRGXQiH8dfxNplQKSmF0l5ctFHK2K2pgDAY5aIcw0qXdsXXf21OGLF4uu
XSu9detOfX1jZ6elp8fV3z84ODhsszkgO9w/hxMGzulEj9lLrXRz9r1U7uHH
7RZHfYvZBroePcURp073kNXZD3X3DcN0AjmztbvT3kMtubI5PU+Z3ZClu7el
w1LT2HKvpv5y8aUTx49u3LDOaNCRGWVqKl+Z7rl9cLxrKEavQQNuuTkZQI/P
Y4FNcFR47lRd7YP2tqamxtqW5nqbteNGRQnsGpxMAAgPEwVQiTIM3/ZtG6ur
7vS5HDar2W7rcPXauzpbXd3OO5U39+zYmWVKN2o1mUZDhkGvVyvIpq5/y5fm
vwAXIZ3aAFEuJnPvyWQPfCnykJGszSRzQtAhbN++s6KiEv8RAwND+H/BfxD+
m/Afh/oVKwqUSjVJaKZSwYSlZ2RkvQouMEX2oYOAGITC6FkZXrJGj717zdaz
ibijyPI6gV6yvDaLkEU9kBLxIIWYDyklAioHmkdyscADGjUsr6SWFT+bViwU
ZYuF2VJBtpJr1HIVRg49i7cwRzjj8Jq5V/bPqbkc0nknputOfMv1ZbWXl9+7
kHhlrzCXN5cd9WncnHfCp74ZOfuDoKlv+U15ff7st+ZMf3PqpDe++vzPH380
ZtzYT8a+/+0H703+p9//7rU//tNbb//pw/EffPvNF3N8ZiwICYiJDGOmJcOt
EYEoDgfhqUwgkAuF1IMhFd+g4GrlbI3UM7Cp4Bk0wmdbR+Ho2alNr5eTDh9d
BHnGqlardTpdbm7u1q1bT5w4cenSpZaWltbWVtI9ksQjZMk2ABmtbriUHtl7
+3EKXiBy2uXoBWJdjj5bz4DTPdI78AhCAaeoBHfkMlwDodwDozn4EL8Lv8Xt
dvf396OLrqurKysrO3/+/Jo1awoKqEE7dNEqlQpdGJfLZbFY1O6EKil6XfTz
eoN3Oy1qIj16e9iFM2dP1NTer2+orquvam1r7Oxqram9d/TYAZ1eiaA+I1OP
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
QfZirTxWxokU0/wMvDnbM/yKd4dUnwtpvRLcfGtK6y3f5oroBxcSL+5M22FK
zWGnKBOSDUyhniXUcDgaPk0tXq6WxamV0WplhFrBJ3pmjCi4+LCeBC6dhAW4
KL4kbAIXYnMI8RRZ5EiJMlseeSalEb40OjXRq8h6bj6td72VN1McWdbqXSeO
MlnCRqbDwXdau2YVevgjp04VFhdX3rvX3NFh6+nr7hvwpG/tQ0QGWbrdz+QY
IAJNPb39oAYQWazdHZ22drOlrb0LiLn6BoEbyMJL3jHMzi4rKDaDmY4ui9Xu
RKQ/ODzy8DHKVpujp7cPp2Ac9SgPDo3gYhQg8i5c1tLafvvOvbz8legoxBIZ
OgrSaUikcr5AtH3b7ls377nBcP8gTKfHXaWm/qLdNjTUbdu2Bf4VrMDKglyS
keBV7t+r4Xq5EBqTApn35Z30RSZBwdODa0d2oifb+OIeUIkjfOC6uhqnEwGy
vbPT3NnZCR8bVnvVqlXAB5QRsoAV8CR5cTkcDmJY1MMJBF8k8iLDF78N16sG
NF4ZcynmyRRBSlm0SpoEV1DDV+g5eiNHn85VZvE4ueIlWzKjL+yPrypJqL0R
ffua78DlL4dK59iKosv2xO3JS8xRM8Q8RlLyUhozTquP27Vt6dWzcbVXg603
Zg3fm/xL7eS6W8ElZ/z2rJ6TK/HX0eINNHE2N2+FeJ08RaNgSJVcrkrMVMNS
SlOl4lSxMJl6Zu2RSsaGNFI2rKpGTEkrZgIug/gZX0Rk3Mk7cP2q/cdHreL/
m0ySXvfemySZ1Hgf2moUUq1SplPJyTJ5kt0l06gjewrr1Qq8SqY0K6UiyJCR
jhCdWncqFCg02oK16w4fP3HpSkltY0ttQytU39TR1GoxdzmtjgFHz3CXpdti
dVptYAfmyd3TO+DqA1ZDKDu6+2z2Xiq1necClHEN6LA7nL0ut7t/EHIh6HAC
ve5Hj78HYqjBq6hBAUbO0Y139YBW2EHyxAEFINw/MDI49Aj2EeUHVXVXr5Wf
PHVu67ZduXkFMqlqVcG6kyfOVlbeamxshv3yjJpSPx4bQe1xg+aNpp6/Ihse
Ql7ms7ALZosYLGoDWfVft6/9O+Ud8SBbm8HJhKsJwYOVo+dUy3AUirgQ4kRA
LZEK4NMiioRbm5ll3H9g9527lXBrAVdzczM6hEePHpnN5gMHDsDwASWSZVrk
+eF5fmDaQBDJgEFG3akcXCCIz/oNuEY7hF6UXgWXRBIvFsYLeLFCziIxe5GC
G6sTLDKJF6YLg/avXl52gnfvAruqKKW5PKH1xtLm8piWC3GXtwVukE7VJU7X
pkak82kGfpqUGXl8j/jSafrdssS2e7Fdd0PMZdObzn9Rc2Lcng2LC4yhGl6I
hr04SyLIkWtVLAljWYqQSRfx0mQSulLJpRw5DVy3DKUiizCllLIAnVLEUAjp
lPi0X/li6f7qH1IiTRptGy0cIFBz85RSSK+S4T/IhCjAI2++CK9X73Xsichc
PjKvL92gzkrXZWdQO3eTTzOo5dS6eB2idTg/cIF0KqlQq5CYtMqcdH1+lglC
PU7hZf3VHVWr5EqFVKaAgVCp4U/qtbr0jMy8tWu3Hjhw4sKFa2Vlt9s77ZC5
y+GdfwVZ7L3eJ2WQ3em2OlyoxwWI9Tqsji6709rdS0ZaiJraOnDa7ervtHW3
d9kQA0It+NyefrwLH44PcfWP9PQN4cPxG1HZ6x5GDT4ZNSi4Bx919w44u/ta
WzpqaxobG1oR15gpU0CFfwj0AFd7e6vDgdCvfdeuHWSLT2/ABS68+5EBtP8C
XKQwmixq01utXKWWKpRiiZQvlvDIHCcdKE7XotmQ2RcyuRDXrCzI2bN3+82b
NwEXXER4jC0tLbC5NTU1hYWFGRkZ8DDhGQI0WDQ+n48jGbsgziF5ngWzxRew
XwXX6PkYo58av9ItZBoEdAWXThew45SSBVmmeRtWz965eXLx2YCy8/53ikJr
S+KaS5KrziVc2R55OMdHLl0qFS6UcoMUzNkm9ndbtTOu7w63Xk3uKo7tKIps
uxTVXBxXc2HZ5f0Lt2XPzhB+zk9dLmUnK3jJQlY8KyWCTYuQSZaZTCyJLEki
p0kULLGSL1QIeRIRUyRkCAVk9E8rZ6ulTJWEoRDR5MI0L1xEumcuIoWYCmRJ
hdQELZlIIxfr5dR8R6NCbFKKoAylOEMlhLJVIiKC1Wi4iG9PzUL5VaMX2lAr
37VULhcQik/Woy3JhVqZgDCLGrWEJ+MzpTyGUsRBvUQmlCslKo1co6MQQzhD
ZegQiELDIuYHhMya7Tt12uxZs+cFB0fFxyenpXHFsLRaU3beqs3bdh89cfZK
ScXtezXVdc1QfVN7q9kKpsgESFt3H/WweuSxa2AYNIEvUAaCUHb2DRDWcIpK
AIhTXIaL7c6Bnj4Q5G5pt3Vae/uHvne6hhuagWC/xd6Hmg4LWO5z9AyiBqd2
W4/Vgiiut989PAAYPWMpnnG5PvKcguzlBDestPRaVlaGUsJTSfkauRAsgAsv
X8QA/f3ykuWFiwyVZGUbgRLwAUTk8QFwI4jx+EyhiIMagCYQspmsVJzC2duw
YUNZWRmiMPQL1dXVCBjRM4AyIGYymYAVEEtPT4ej+F+G67kpGa+CS848KGNt
VvBNRjV7TUHskcMLSkv9qqpmmVt9mmumNtyaWXPF/+o+vz2GaavZU1bSZkVx
MiNS2SncmDWrI8pPL+i4Ot115ZORovHfF33tPjW9fodvYfb8jfKQTOEivYxu
0InYSRwRk6OQMFWKBLlyoUAWzBOHcISRPHECT8ISyERoylK9TJYulGey5Vlp
RjXfoOLplZ5HVzIW+EIwqBTQ1SKmFy7EXx5xIbIQXiMRaqVUszfIRZBJLkxX
iDIVgiylMEspyFYKclTCHBUfgktP5F3c4Z1JSx6KEbffewF4wceCKXAEmrzp
JkhqF9RopHxcsDo3/eShPTdLi+saq1raGm2Ort6+7h6Xs8va2djcVFVTvf/A
odVrNghFsqjouJmzfCdOmjZx4ozJk2dPmzlvps98X/8FQQuiIxcuiVuSvCyR
npjC0hlzcles27bzwMkzl0rKb9+5X19V21JT3wamyMgkmMIRp0CprdMKjgAU
yjBefYPUrC2UYcK6bK62DpjFHjAFysARhDJqoO7eoYHhp67+RyjjMrzk6h0A
X12ddkuXAwW7vburywqq4Gi53W4gBstFjUFau1AYHOyvvnvjdsW1KxfPHD+0
Z8v6AriIAE0qYP2X4SL73nrhEonZCqVQq5NBKEikXKkMjqKAy6ORdSioUaLb
zDGY0tV8AUMmU0A6nWHTpi1XrlwjY4mtre1NTS1kaPHq1ZI1a9aJxVI+X0jj
+dC4fjROMIMVw2AsZ9Ho7DQ+J0UCl0pIkwgZXBGDJuYsFXOjJbwwKT8Er/FY
SXxaghAmIyVBTUszMpmZbJ4mhaZISZalJsqYSXJhilSSyBMtYfJjNvD892n8
r2wKaikM7rnh31s51Vr+jblkmrk8suxE7PbVi7SKOAYvMYHHXiKQLhYpD+X/
rmj776oLP7RU+DluL+m8wWi+JqktSj+6nrszT7RSzddwWSIaA/ctYYllPKVc
QHupZPw0Im8N8QAplF4mGDJiy57hJqbDqEHEfyD/I97NiH9Do7fnGC1vdPZc
Pl7qeRkskWc+LUliQMVunok6MoVUJBHu2be7tb2tx903+HAEQnPtG3iMZowW
OzjyAwwHmvfI458RZD396d/QqnvdD1Fz+17d9cr72XlrIuKWkI0g/RaEzwkM
njRz9iz/gAUxC6fM8YFm+M31DQkMigqPXro4hcNER5SZu2Ln3gMXiq+W3bh1
v7oBDp5nhn8/ocZi70coZ3cOdffCA3zU2/d9m7m3uc2OSlf/E1s3zNMg7gGG
DDdG1gVQBrG7l8zpgnB7+Aq4ALi1d3ZDuHOUG1u6YPtQwEv4dRC+hdfw4TPx
rSG8F6d4C3qDq6U3Dx09s2b9NmNGvkJtkikNcpVRrpEpdQqNUa1Lh4+s1Zo0
aoOK1JCCjFrFJJEoxWKFCNKpRRqlQCnjysQsqYiJo4IaIuah8jmRcTCpQiiW
8fkiNk/AVqik6zeuKbp8oa6h1mLrau9oa2lrbTO343jn7v2Tp84wGYso0eNZ
jKUseiKLlsKm0zg0Go/B4DFpfBaNz04WshNEnKUibryIu1jKTpBxl0t5S6W8
JRI+oEsQc2hiFlfMEKh5CqNIbuCx1MwYHScwXxmwJSvs/imflsshLddC75/z
u3nK//aZ8NLDUSc3h2uZXxp4s42iIJUwWMYLUMpCcnPiN21h3Dsz/kHhZ/WX
Z3beWGi5lVpziXZmy+INxvBMcbhBsFjNTZSyUiUspojDk/BEEr70t+F6jqzf
gAtWzCsCGtH/Jbi89UqZkKylIlPWCVxqjeeptGf+7dHjRxqaGhtampvaWls7
zGhg//pv/wc0Vde1PqhpBmUooxL+GBoevK9Wsx01Qw9/RCtFvXNw5H5Dsy4r
d/LsufPDImMTkoOjFk6cMWvGPP/AyIjg6Kg5QYFAbN6CoMDIMP+wkKDQiJDw
qHkBwXP8AiKi45gcoSkzb9PWPYePnT17/kr5jQd1jZ2dVrh5w+DL4XzYP/gT
sAJo4K69swdwEXxAB4njEI7BwLV2WJrbOyFi5vAqriGUgRTcM74Ibh7gADec
QriSoEcYhMAa3ujtQHC9e/DJ8KOf0Mngo3AB3NGT504dPHZo844tOStzNUat
VCUTycUQi8/mSwRy/P2NIE6n1KnECglPzFepRFqt1GRSZWXpoPR0tV4vV6vF
ZG8UlPEqTnGZZ/qrQKmRqrQyYIXGx+WzBCIuQuCMrPTiK0XwH7p7nO6BfpvD
DsbMHV2cZLZHLG4qnZuWwqYlcxgJHMYyLns5EY+TyOEkc7kp5AmXkp0oYy0V
MBczWXF03lKGOIWt4PHRFagUbBaNuSxSkRK4VR1asjm25fgSx7l4872Pqko/
rC6b03yHXnFRvHlFqlqwFCGSQUKTsyNl9JlZkskHV8+6cTyw9UqYpTy0qSyy
pSK2oSS+9ETk/jV+qzTTs6RzM6RhElqIkBbFp8fzGcv5nDShgE3liEYA8mq4
XiQLIrbpRZFYzCv4jUSvgstb85x+G67nyIKEPCa1Ns0zH08qebYrHODauXN7
p6Vj+OFQR1fng+qqshsV5y5e2Lx924nTF7fvOmjKXJGcxgkMiYKzt3hpSlIq
O79gQ97K9TduVaEFotUR00atiXb2d/c/fPjjXyru1syeH/TNtJkB4VEwZEBs
flgEEPtu9iyfwICw2EUwZyhMmjpjtq//zDnzfObNDwmL9gtYMHka5VviFwWH
LgyNWBwbn8JgS3TGvHUbd+3ac6K0/EF1HWI3NH6YGCAzgvYPfHADZGkbFc39
OhsZTiaxRxAKQInYONww4QgiLxH7hZe8lo68i4Rv+PDmNisuRpl0LLiMGPGB
kWHYdxwR1HXZbfXNTbfu3S2tuF546eKBI4cL1q5RajU8kRCSqZRaowHRFhFi
LsRZZLGk3vA3S0u810AACljJFGIIBZ6Ay+Vz+EKeUCzKycs9evxY5a2bDY3N
gAsSJAgFCXxeIpefzOGlMLmpaTxaKocOHyGZzU6CWOwUgMfi0iAmj85OSOKl
0KltHgVStlhGF/OTRMmJguhEro9K77Nz84KSYzGN52JtZ2P6TkcNnoy4fvW7
GyX+xw8GGtWzBKxAyhzIBFzmMgk3It8UcnRb4I2Tfo0Xp5svfGYtHGM/++7N
i8xzB+K35PlnyKYp2JNlzFkSVoCYGWZQpaokqVQqaXYCm5vIF6dJlWyVjv8q
uF5is0QMSCVmvlQ6OVev4FFTB5V8o0pgUguhdI3oVXCR+hdFpry+qOe8Qe/k
WJL/0OgZoie54yDA5Xa7QJbDae8fHHj05LHN2d2NcGVkeMv2fQtjl0+aAlAi
QiNi/QLCEE/Nmx/qafmxn34+UalJr2/qIOMMaIo9g99Dlp6hzu6BsJgl84Ij
ZvgG+gaHzvIP9A+N+G6Wz9dTp8v1RrPD+fQv/1bXZn5Q23Dz7oM9Bw6r9Sae
UBa/LNnHN2DqDF/wheOU6fOgGbMD5vqFBgRHBy+Im+cfGQGfcmlachpPpjSt
Xrf9+KkLFTfxMe31Te3NbV3mLgfIcvYNIFLrH37kBQGkEJRwk3Zqi4An6A2I
/fJYvWfOIQpe0DyuJlVDxW79jwAdaIKNgz/pza7QabN3WG3tXRbIbLF22alE
yo5eV3O7GfUoOPvcKNyvqS2+VnLy7Lmdu7dt2rJ+RUGuMV0nV0rIbsOQVC4i
BEGoJ4LBUmsVKvSEKikuEIiewcUT8MVSCYfH5QsQneXBIayqru3ssgqSaIIk
BsRPZvKT2bwUNi+Vw0njcOhUalzqh9pvnMbg0hi8VEjI1XCYGnqKKjVRTk8T
8wVspTY+I3vO/kMzz5374kbJF7VlExuLZzWeCm48sKhpb+LGDUy1MorPWiAT
LJLyFrKT58p4s9bmzb1wPKS0cOaDK5Pqr37VUDSh8eyEppNftp6cmK2P1MtC
4CiKWPOFrFABK4pDX0hPjTHqRWo1XyJj8sWpPFEST5YkUqVItWl/D1kEKyK1
hPVSaWUcwhfgIlhl6iTQfy9cz5EFmfQqGC82A1GqAGZLKOBAarWyo6MdZLV3
oNVT269YHPa+waGnP/9S12i+WFy2dcd+gVg1Y7b/xxO+AWg+vkFAbNYcOHLx
8BXRAtGAf/j539FWOxyDZvtA38jP9+s7Js/ynz43KHTh0m+n+UTHJ074ZgoQ
23HgsKXXbXb0VDW1tlrtsC/Dj5+CAkeve2D4CdTSbrl1t/bytRv7D53Um/Lj
l9F8fEO+/W72N5NmTfxu7rQZATN9AsGar3/Y9Fnzv5s6F7cREhYTFbN0yfIU
Dl9izMjdvH3XybPnr5XfALYEJbh2oGO0VUI97J2XFGJ/cQEghbNHakYTh+uB
Et5C/EavyWvrtBIXtLHVDKGAU/ilZJATBfKsAbzjCwJ5WLdOm9Vs6YLXfb+m
Gh7CxcvFpwvPkbxvSvJI0jMnm0pAKZWANbGUwgpCRIy4WKlWkTlt5Ck5pFLr
V61ef+jwcV4KLFESF8fUFF5qGmW50hgcGoPDYELgi0U2Vng2eEhLoXFTUplp
KTQBMyVDkbxjVeLFw7G3iuZXV0yqvv5hVfn42uuT718OLdoXt9mwUJ8atCye
z6FJuGnJ9GW+at60w5vnVZz1vX3+y9prH1cVv3+/aPy9SxNvnJlzcuvcFYpv
RMvHJCwLZDNiZOJkmTiVy05gpC2lth3ns/CruTwaDJYI1lKRKlAk8uRLOdK4
v9NgeW2WUsp6qRQS6iWVjK1V8kh2l3S9BHoVXGSs6UWRJP8varQrSLAi9XAI
pSKuXCwgKYxEQi6XwxKLhVKp+ObtW0NwcoaH+twDroFB99AwemP08MQRGhh+
iiPwQfB16mwRwiKNPgu4ffTp199+N3N5EmPJ8jR4j9v2nCguvZe9cstUn6D5
obEzfBd8N3N++KLlcwLCZ84DBEtUxuzDp87fuFfb3GVz4BN/+pcnP/4Cvqhp
jX1Dw49+ePT9z/ilCOIQyo08/pf+oR/g/sEVLCm/W3ihPDN7HYeviFuSOj8o
CsQBLphRaPK0OVOm+0ybOXemjx88TN/5Qf5BC+YHhyamsFhceJU5G7fsPn2u
+OadGtAEWMAFoANxuAV8QZSBTFOrhYRmAA01xIp5ByQhUu/FzUNoN2I9kkUB
RwR9sJ6woVTo14lQzoq+AmrrsMGkdlqdLZ2dZNfUTofD4nRae3psvb1Q3/Cw
3eVqMpsr7907f/ny/qNHN+3YsXrjRpVeLVPDvZAgjgNrcC9hhch+djyRWCxX
CaUKJldAZ/O4AikzLZlJS2LSElj05Wz6UjZ9CYcZD/EYlPjMZXxGIp+RLKTT
hHQGlJo8UybyX7cy8uyh2JuXomtLguquzKy+NKmt3K/h8oKyowt2rZyn4c9g
JsykJ4WwGYtTFkXwloet1EUXHUqovbKo9vKM+qIJraWfmcu/a7zme+NU8MGN
IRmqAAE7jMNJhBMrFnFZYDd5OS0tRcgXyBFWCYWgOzUtkcFM4fJTheBLmiyU
LueL47jCRX+nzfK6f0op56WSChkyEVMhYatk1DRdNHOjVmLSSV8Fl0YufKn+
U7hGk0XN+pCJC/Ky9+zYunvXtlUFeWqVgsdl0+lpfD4fnaEpIx0+RmNTCzyc
oUeP//1//wdaGvpztCtSwJG0STKGhkhk/aadYGbK9Llw5KBJ0wPnBsTMC4qZ
PmdBZGzKrHnhE6f7ATH/BYtm+S0AXz7zw6bNmf/1lFlTZlMbGWfmrkjPzjtw
5Pjdqtq6xja0wP6hxyALDR44A65H3/8Fx4HhH3v6Htm7R378Gbc0YnUMNLZY
S6/fu1Z2Z8/+YyBops98YDVrjv/sufMB1xy/gLn+gRDq0QNAs+cG+geGh0ct
RsyYkMzMzFm1buOOI8fPlVXchVtLxivw7YjBQpl8ZTLM2NbhIA4keRCAb93Y
0gUSIRJ5kUpgi78J0MPFZOBx9GgJGaVst3e3WGz17R01LW1Qg7kT5ruju6ep
09LcZW2zOVC2utyO/sGeoZHe4YcdVktja8vdqgeI484XXTpw5OiaDRtNWdlS
pYYvlgErxE4Qgy1gcUXJzOQURlIKcxmNtZTOimWwFrLZ0TxWOB8uGTNUTA+V
0SPktCgFPUZJi4UuHph39disGxcn3S+ZUF0+pqpk7N1LX1ae8j+6KniTNj6d
kSBcuoS1ZBEjKYxO96ezfM5vmF2yZ+6t4z73z02tLZ7UcHVKTdGsm6cDj20I
2pgRpePHsZOXpSTSU+jiNK4qTagnu3qhaXGovb7YMJtkr0kJ3FoBm8ovykkU
cJcKeUvEwniJaMnfA9ffhFcy7ksl4sHHpRG+1HKeTiU0aMT/7XB5vUFvPci6
UXbt8fDAk8fDvT3dVktne1tLTU3NtWvXtmzbuih28azZc3zm+M71n78sKVWu
1q1cvanw4rWq2hY0D8AFrNB40MzQeHCKbh81lberEYIFLYhG650xN3ymb8TE
aQEhkQngKzhi6UzfsJnzQqfPDZkbGOW/YKFvUCT4giGbGxgGzZwzb+pMHzSV
wkuXj508V7BmY3beKkN63onTF4uuXL/7oMnc1evqfzI48hPUP/jT4PAvtu5B
sOYefArEULhaehPIBIZEBYZEzA8K8wtYALMFrIDYbF+KqTnzgmHacG8IGxEz
zvULgVtLoMMRL8GlpDEFal1mdt6aQ0fP4PvCLwURZOgD35REWN7BQ8IdGb1v
aXe0dYAaV5cNtgw18DlhzuBAulBADYRCe2cPrkSHUN/R1dhlbbbaW2wOHBs6
LbXtHVUtbeS0yWJDDa5BZU2bubq1vbm9rb65qa6pGUGcxdFt7+ntsjtbzF3w
eCtuom+pLLx45eCR0+go4DYs5y5ayl64lBmznBmXxlnK4iznspcKmLFyziIZ
I0Sa4qNImZrOm7Y9PfjizuW3TnFbzn/aUvRJ4+WxtVfHVpd+UV44ZeeaiXLW
RB13iWBZSlp0CiNmiSApzCDx3b0p8OrFGMvJ97vOjLNc+rzz6pS6otmXD/tu
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
J9wsnH3lsP/xzXON+gUyYRAzOZAev5C7FOZKKEsSSRKZ0pQEMS1azAoVcoN5
vAU8XhSXH8/hL+dzFkPUhBCPJJwECHzJmNTEKgUzGZYLcOk4DEjPZQKl0ZMx
SBmVL5otkAWR5+wviuSf954qlUKiV8ZWEh4R4CICYpB3icpzAlCkQLbu0moU
sGVbNq9va2p02qzD/bBabocNhFkH3IM//PBTb29f/8DIwOBDR7erpbXj1t3q
M4VFm7ft3nfwBOJ9+EI19W1ooghDEI+gHQI3tEOhRB0Tl0A8LvhRVIfvFzZK
C35V8FQf/y+/m0GmbcAcfjNt5pWKm7Y+atK72WLvcQ8OP34Km+V0DULwM3Py
14KXb7+bvTA2MXLhMvAVGLIwamHigrD4iOilgIsMxU+c7AOu4RYCMURbH336
JQI399DDpz//67/9r/+DKBFkkVlbZFiGPK4CXPguoIzOEoIdIAbQcMHwo59+
+PnfUYaxA27rN+0EPgAKlJGneyjgrvAbwZrXrsG9hJMJ3HAaG5+Et8QtSUbY
mLdy/doN2w8fO1t8teLGrf+/uPPwjqNM0z3/wOzZe+7u3b13lpkBnCRLanXO
auXQ6lbnnHMrByeMGcIwQ44z5GAMZmySPcAQTLIBJ5xtSZZkRSvZsmyDDezO
hrs796l+TVF0d8k2C+f6PKdO1afqUrX8/ep536++sJM6XO093L//2ODh4yPH
hsb7hk9mxnEz8yR8fuQ4frTnUN+uA8d27j/66eeHP9l7aMeegzsPHN518Mju
Q0f3wryODhzoHTrYd+JQ/+jewwPQnkODpN0HB6BOT1erK9YRcPxmpeW531u3
bja8+br8tc3Xv/Hqrz5+p3T3+7r3Xil/9i7JramlXfZFbaalenvA7HA7nfq4
T3Nbp3Lzg2W7XtIe2yI+sOl6ZFV9b8v3vFb+1vr6J+/Wr0ypbQ1LmtJqe0ut
L2VhRo2Z3cEGd8ro7rZDhm53dZtP1xyoSoQNkYgrEAn7YslYxM40WYTtiYgj
EbWlIrZ01N4cccLC0kE7Y2FhV3vY3Rn1Q12xABcoLmjcdkKWrO6WMB9cWZRB
NGaZkMkVyxRLGXkZs3BJPsGq4F8ACjkX4Fqzugcl0Uhg3Zobn3vq6c937QZc
s9MzE2MnmfWgR8ZOTsyArOGRiSNH+wcGRydnzkBDIyepjQv1ExUP1QOpPTWU
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
FkaDykS4MuKrCbjq/G5T2Oeym00um93jcvv9/kDA5w+43T67y2u7argyqVOu
kExRYzvb3n6pBZ4HLm5YxRVf5czCiq38fOdTNc4VFxzCiq3w+WHM3H+u2C/C
krVwgwmcC4rHQtS9iu4c5e3trbSWcToNewt3d3c++eTjH3/84eef7wFW8/Nz
0PDwEATW4FxPrX9BoS1fVFCkq64rFIiuX1ooU4MsJQoh7CNyAwIoKZUqEMLJ
Farrb1isUKplcqXJbJ+emTs9d+7k5KlRprXzq+Hhqfn5r06d+mJu7sJf/vLX
117786KlsiJBmUhaLZJVAi6BuAy2hec/DBEg41dct3TpnoMHT58/C+dCZDh1
9tTo7NTw9NTozOmxmXOzZ/8C26pq8Mg0BplGr61uKpGqi6WIK3WLSpZs++z9
8ZMTzED7w0fHxqcAF2yob2Ci7/jkyMT8jp2HVWUNFNNKNZXLxbIlJUKYUZ3e
Eku23//Q48+/+MrHn+xFcrd3/zEaVobMDvRR7+jfP/Ys0ls41zKBckmxvEis
FikZwy0WKfCQyWRnGsDlC/jhXIDLF/CuivzjbS2/+MO6xa89VLJjg2TvJvHu
F4t2PLvsk+clf35c9czvNLd2lsX85Q6r0WIP2DzNyVh1wKNxWpUOqy7gMUYD
rmjAG/L4HGan2+bxuwIhbzAMvPxen9fpcV+1c1GLeq6yXmOx4oOLT3wOcrWO
szBc7MfZ8h8G13eG9W05H1xZ+u79WizS2toMxAAXLQkHpVIJgHbzzTc99tgf
Xn5505tv/glRIuzsjTe21uob6xoNuqpqmUoNS4JKJVKBWFJYIlguKC0WirCP
QolCiROYcyTiRYuXFpeUYvvpZ7syM4ienT/7Jer2hYv/MjI6iRoOuCYnz+ze
fai+3iwUl5dXmrAVScql8ipteYNKy4yn1uiYNoRfXL94zbqbz355AYwOjY6M
T02e/vLi0MkpRG0zZ7+ePP31N//+1+bOW2FbEpW+SITArL6stkFerhOqpK6I
G9Hj0PCJY329cK5BfH50MjNYYOxo7zjCwgceeRYs62qbEM6V1TQWCCVCpWZp
oZAsiTo0anS1n+zcT+tZg7KT0/OwMxr5Ajt7Z9sOXa25WFK2uEiGPBRpl0Ci
wmMBYeGiZcuXFRUrNFqTxQzzcnmcTrfj5Qeueefpn3266ec7N1//4fpfvfvU
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
    "], {{0, 176}, {287, 
    0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{287, 176},
  PlotRange->{{0, 287}, {0, 176}}]], "Output",
 CellChangeTimes->{{3.71638352605639*^9, 3.716383532960946*^9}, 
   3.7182247092495766`*^9, 3.718312838761476*^9, 3.718619733585535*^9, 
   3.7186415248145456`*^9, 3.718649416412258*^9, 3.71866306394226*^9, 
   3.7186757311430826`*^9, 3.718676140554557*^9, 3.7186767787258973`*^9, 
   3.718678116416503*^9, 3.7187101547473593`*^9, 3.718710386220435*^9, 
   3.7187142152879314`*^9, 3.7187286319897184`*^9, 3.7187292621831856`*^9},
 ExpressionUUID -> "33ce521d-2e1c-4501-894c-82b8952bb684"]
}, Open  ]],

Cell[TextData[{
 "reads in the first image. You will build a function in Mathematica. ",
 StyleBox["The input to the function is a file name",
  FontWeight->"Bold"],
 " and",
 StyleBox[" the output will be a list describing the number of signs and \
their locations.",
  FontWeight->"Bold"],
 " To be precise, if there are no stop signs in the image, the output should \
be:\n\n {fileName, 0}\n \n If there is one sign, the output should be\n \n \
{fileName, 1, x position first sign, y position first sign}\n \n and if there \
are two stop signs:\n \n {fileName, 2, x position first sign, y position \
first sign, x position second sign, y position second sign}\n \nHere is a \
simple function to get you started:"
}], "Text",
 CellChangeTimes->{{3.716383546189361*^9, 3.716383552901471*^9}, {
  3.716383845866395*^9, 3.716384010152598*^9}, {3.716384192750763*^9, 
  3.716384317913622*^9}, {3.716384412256406*^9, 3.7163844267655783`*^9}, {
  3.716384745313065*^9, 3.7163847459909687`*^9}},
 ExpressionUUID -> "89d6db1e-2a7a-489e-9ee6-f62b30922feb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allPics", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*.jpg\>\"", ",", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", 
      "\"\<stopSignsTrain/\>\""}]}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"findStopSignSimple", "[", "fileName_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"img", "=", 
       RowBox[{"Import", "[", "fileName", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"pvp", "=", 
       RowBox[{"PixelValuePositions", "[", 
        RowBox[{"img", ",", "Red", ",", ".5"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"middle", "=", 
       RowBox[{"Round", "[", 
        RowBox[{"Median", "[", "pvp", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "1", ",", 
         "middle"}], "}"}], "]"}]}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.716384438677712*^9, 3.716384439820799*^9}, 
   3.7187280883071175`*^9},
 ExpressionUUID -> "d20b79a4-191e-4242-a635-35eedfbab735"],

Cell["\<\
This imports the image (using the fileName), then finds where all the \
near-Red pixels are. It then locates the median position of these near-Red \
pixels and writes the output.  You can run this on the first image:\
\>", "Text",
 CellChangeTimes->{{3.716384449259532*^9, 3.716384549479681*^9}, {
  3.716384751471572*^9, 3.716384752445928*^9}},
 ExpressionUUID -> "7692ba05-a95a-4f9e-82cb-ae8725d95877"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findStopSignSimple", "[", 
  RowBox[{"allPics", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.71638453440954*^9, 3.716384542048089*^9}},
 ExpressionUUID -> "9f61abd9-1bc1-4398-893f-792efa1f6098"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"signImage20\"\>", ",", "1", ",", "79", ",", "123"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.716384551333996*^9, 3.718224709720914*^9, 
  3.718619733712986*^9, 3.7186415255756516`*^9, 3.718649416696457*^9, 
  3.718663064307173*^9, 3.7186757313404684`*^9, 3.718676140749692*^9, 
  3.7186767789817777`*^9, 3.718678116602631*^9, 3.7187101548788977`*^9, 
  3.7187103863631864`*^9, 3.718714215457945*^9, 3.7187286323699813`*^9, 
  3.718729262336302*^9},
 ExpressionUUID -> "20a77ecb-163c-4336-a2b5-a87dee1c048d"]
}, Open  ]],

Cell["\<\
You can see that it correctly reports that there is one sign, and estimates \
its position at 80, 123 (the origin is the bottom left, so this is 80 pixels \
to the right and 123 pixels upwards). To determine whether you answer is \
correct, you can use the following ground truth, which I gathered manually. \
(If there are any gross errors in this data,. please let me know).\
\>", "Text",
 CellChangeTimes->{{3.716384555838831*^9, 3.716384689544807*^9}, {
  3.716384774414547*^9, 3.7163847893247623`*^9}, {3.716385101024972*^9, 
  3.7163851047656927`*^9}},ExpressionUUID->"43e67f1f-de00-46fe-97bc-\
5fd0c55dbf48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"groundTruthTrain", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<signImage20\>\"", ",", "1", ",", "74", ",", "129"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<signImage22\>\"", ",", "2", ",", "149", ",", "115", ",", "150", ",",
       "52"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage24\>\"", ",", "1", ",", "61", ",", "124"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage26\>\"", ",", "1", ",", "175", ",", "111"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage28\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage30\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage32\>\"", ",", "1", ",", "89", ",", "121"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage34\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage36\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage38\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage40\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage42\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage44\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage46\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage48\>\"", ",", "1", ",", "142", ",", "24"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage50\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage52\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage54\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage56\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage58\>\"", ",", "1", ",", "215", ",", "86"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage60\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage62\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage64\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage66\>\"", ",", "1", ",", "238", ",", "122"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage68\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage70\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage72\>\"", ",", "1", ",", "52", ",", "131"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage74\>\"", ",", "1", ",", "228", ",", "132"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<signImage76\>\"", ",", "2", ",", "65", ",", "194", ",", "145", ",", 
      "165"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage78\>\"", ",", "1", ",", "40", ",", "93"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage80\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage82\>\"", ",", "1", ",", "223", ",", "138"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage84\>\"", ",", "1", ",", "124", ",", "133"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage86\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage88\>\"", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage90\>\"", ",", "1", ",", "224", ",", "117"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage92\>\"", ",", "1", ",", "194", ",", "107"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<signImage94\>\"", ",", "2", ",", "72", ",", "101", ",", "243", ",", 
      "125"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<signImage96\>\"", ",", "0"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.716382728584237*^9, 3.7163827286053553`*^9}, 
   3.7163834228721952`*^9},
 ExpressionUUID -> "74a6cfa5-7c6b-4fc9-9598-05cdb7af3de9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"signImage20\"\>", ",", "1", ",", "74", ",", "129"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage22\"\>", ",", "2", ",", "149", ",", "115", ",", 
     "150", ",", "52"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage24\"\>", ",", "1", ",", "61", ",", "124"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage26\"\>", ",", "1", ",", "175", ",", "111"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage28\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage30\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage32\"\>", ",", "1", ",", "89", ",", "121"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage34\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage36\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage38\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage40\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage42\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage44\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage46\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage48\"\>", ",", "1", ",", "142", ",", "24"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage50\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage52\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage54\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage56\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage58\"\>", ",", "1", ",", "215", ",", "86"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage60\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage62\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage64\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage66\"\>", ",", "1", ",", "238", ",", "122"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage68\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage70\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage72\"\>", ",", "1", ",", "52", ",", "131"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage74\"\>", ",", "1", ",", "228", ",", "132"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage76\"\>", ",", "2", ",", "65", ",", "194", ",", 
     "145", ",", "165"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage78\"\>", ",", "1", ",", "40", ",", "93"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage80\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage82\"\>", ",", "1", ",", "223", ",", "138"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage84\"\>", ",", "1", ",", "124", ",", "133"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage86\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage88\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage90\"\>", ",", "1", ",", "224", ",", "117"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage92\"\>", ",", "1", ",", "194", ",", "107"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage94\"\>", ",", "2", ",", "72", ",", "101", ",", 
     "243", ",", "125"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage96\"\>", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7182247097589703`*^9, 3.718619733817249*^9, 
  3.7186415256331916`*^9, 3.718649416806535*^9, 3.7186630644262547`*^9, 
  3.718675731356802*^9, 3.7186761407647004`*^9, 3.718676779050318*^9, 
  3.718678116624146*^9, 3.7187101549166784`*^9, 3.7187103863787813`*^9, 
  3.7187142154879427`*^9, 3.718728632390008*^9, 3.718729262356306*^9}]
}, Open  ]],

Cell["\<\
As you can see, this simple function has correctly identified that there is a \
single sign and estimated the location to be not too far from correct: (80, \
123) instead of (74, 129). Not bad! But this simple function will fail on \
many of the images in the test set. Here are two ways to run the algorithm on \
the complete training data set:\
\>", "Text",
 CellChangeTimes->{{3.716384694816502*^9, 3.716384729662984*^9}, {
  3.716384826300171*^9, 3.716384913070668*^9}, {3.716384946951322*^9, 
  3.716384964860305*^9}, {3.7163851198376827`*^9, 3.716385125780864*^9}},
 ExpressionUUID -> "480623ff-7ea3-4fde-9204-30b470dc5d1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"findStopSignSimple", "[", 
    RowBox[{"allPics", "[", 
     RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", 
     RowBox[{"Length", "[", "allPics", "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.716382775666911*^9, 3.716382804240629*^9}},
 ExpressionUUID -> "7a7fad27-25a9-4403-bb20-34daec5bf7a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"signImage20\"\>", ",", "1", ",", "79", ",", "123"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage22\"\>", ",", "1", ",", "149", ",", "96"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage24\"\>", ",", "1", ",", "94", ",", "98"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage26\"\>", ",", "1", ",", "177", ",", "102"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage28\"\>", ",", "1", ",", "113", ",", "91"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage30\"\>", ",", "1", ",", "178", ",", "80"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage32\"\>", ",", "1", ",", "94", ",", "114"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage34\"\>", ",", "1", ",", "125", ",", "97"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage36\"\>", ",", "1", ",", "152", ",", "90"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage38\"\>", ",", "1", ",", "95", ",", "129"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage40\"\>", ",", "1", ",", "148", ",", "83"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage42\"\>", ",", "1", ",", "89", ",", "103"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage44\"\>", ",", "1", ",", "107", ",", "43"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage46\"\>", ",", "1", ",", "89", ",", "81"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage48\"\>", ",", "1", ",", "159", ",", "54"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage50\"\>", ",", "1", ",", "173", ",", "48"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage52\"\>", ",", "1", ",", "129", ",", "68"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage54\"\>", ",", "1", ",", "146", ",", "80"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage56\"\>", ",", "1", ",", "89", ",", "89"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage58\"\>", ",", "1", ",", "207", ",", "79"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage60\"\>", ",", "1", ",", "109", ",", "96"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage62\"\>", ",", "1", ",", "167", ",", "93"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage64\"\>", ",", "1", ",", "109", ",", "83"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage66\"\>", ",", "1", ",", "233", ",", "102"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage68\"\>", ",", "1", ",", "177", ",", "60"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage70\"\>", ",", "1", ",", "135", ",", "54"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage72\"\>", ",", "1", ",", "140", ",", "53"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage74\"\>", ",", "1", ",", "234", ",", "60"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage76\"\>", ",", "1", ",", "77", ",", "174"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage78\"\>", ",", "1", ",", "152", ",", "36"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage80\"\>", ",", "1", ",", "66", ",", "129"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage82\"\>", ",", "1", ",", "215", ",", "81"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage84\"\>", ",", "1", ",", "104", ",", "48"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage86\"\>", ",", "1", ",", "241", ",", "344"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage88\"\>", ",", "1", ",", "568", ",", "817"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage90\"\>", ",", "1", ",", "222", ",", "91"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage92\"\>", ",", "1", ",", "208", ",", "100"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage94\"\>", ",", "1", ",", "174", ",", "73"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage96\"\>", ",", "1", ",", "191", ",", "91"}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{3.7182247168698287`*^9, 3.718619737189727*^9, 
  3.718641532342692*^9, 3.718649423254049*^9, 3.718663071169761*^9, 
  3.718675737245553*^9, 3.7186761465665894`*^9, 3.718676785578668*^9, 
  3.718678122429715*^9, 3.7187101549323072`*^9, 3.718710390839094*^9, 
  3.7187142207982483`*^9, 3.7187286383751163`*^9, 3.718729268023246*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"findStopSignSimple", "[", "#", "]"}], "&"}], "/@", 
   "allPics"}]}]], "Input",
 CellChangeTimes->{{3.716382747149439*^9, 3.716382756410396*^9}, {
  3.718224659216136*^9, 3.7182246608412657`*^9}},
 ExpressionUUID -> "129aeb18-fd4e-4165-ab39-6ac680b773f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"signImage20\"\>", ",", "1", ",", "79", ",", "123"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage22\"\>", ",", "1", ",", "149", ",", "96"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage24\"\>", ",", "1", ",", "94", ",", "98"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage26\"\>", ",", "1", ",", "177", ",", "102"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage28\"\>", ",", "1", ",", "113", ",", "91"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage30\"\>", ",", "1", ",", "178", ",", "80"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage32\"\>", ",", "1", ",", "94", ",", "114"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage34\"\>", ",", "1", ",", "125", ",", "97"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage36\"\>", ",", "1", ",", "152", ",", "90"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage38\"\>", ",", "1", ",", "95", ",", "129"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage40\"\>", ",", "1", ",", "148", ",", "83"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage42\"\>", ",", "1", ",", "89", ",", "103"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage44\"\>", ",", "1", ",", "107", ",", "43"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage46\"\>", ",", "1", ",", "89", ",", "81"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage48\"\>", ",", "1", ",", "159", ",", "54"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage50\"\>", ",", "1", ",", "173", ",", "48"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage52\"\>", ",", "1", ",", "129", ",", "68"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage54\"\>", ",", "1", ",", "146", ",", "80"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage56\"\>", ",", "1", ",", "89", ",", "89"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage58\"\>", ",", "1", ",", "207", ",", "79"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage60\"\>", ",", "1", ",", "109", ",", "96"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage62\"\>", ",", "1", ",", "167", ",", "93"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage64\"\>", ",", "1", ",", "109", ",", "83"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage66\"\>", ",", "1", ",", "233", ",", "102"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage68\"\>", ",", "1", ",", "177", ",", "60"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage70\"\>", ",", "1", ",", "135", ",", "54"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage72\"\>", ",", "1", ",", "140", ",", "53"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage74\"\>", ",", "1", ",", "234", ",", "60"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage76\"\>", ",", "1", ",", "77", ",", "174"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage78\"\>", ",", "1", ",", "152", ",", "36"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage80\"\>", ",", "1", ",", "66", ",", "129"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage82\"\>", ",", "1", ",", "215", ",", "81"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage84\"\>", ",", "1", ",", "104", ",", "48"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage86\"\>", ",", "1", ",", "241", ",", "344"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage88\"\>", ",", "1", ",", "568", ",", "817"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage90\"\>", ",", "1", ",", "222", ",", "91"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage92\"\>", ",", "1", ",", "208", ",", "100"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage94\"\>", ",", "1", ",", "174", ",", "73"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage96\"\>", ",", "1", ",", "191", ",", "91"}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{3.716382758199766*^9, 3.718224722726861*^9, 
  3.7186197405946245`*^9, 3.7186415386225257`*^9, 3.7186494291350074`*^9, 
  3.718663077328414*^9, 3.7186757431622515`*^9, 3.7186761525155783`*^9, 
  3.7186767922574635`*^9, 3.718678128282753*^9, 3.7187101549323072`*^9, 
  3.7187103951296062`*^9, 3.7187142260085154`*^9, 3.718728643509653*^9, 
  3.7187292732478895`*^9},
 ExpressionUUID -> "2cbbf01c-6734-4a89-8292-3d9c70690d75"]
}, Open  ]],

Cell["\<\
As you can see, the simple method always reports exactly one sign, and there \
are often no signs, or two signs. Your task should now be clear: create a \
better stop-sign-finding algorithm! \
\>", "Text",
 CellChangeTimes->{
  3.716384940864079*^9, {3.7163849724359617`*^9, 3.716385047536665*^9}, {
   3.71638515433943*^9, 3.716385155251713*^9}, {3.716385197777526*^9, 
   3.716385391545329*^9}},ExpressionUUID->"4ba52665-7404-42b3-857c-\
fd6d3413a011"],

Cell[TextData[{
 StyleBox["You should turn in your function as a Mathematica notebook and the \
output should be of the form shown.",
  FontWeight->"Bold"],
 " We will run your algorithm on a collection of new images (that you have \
not yet seen) and record the accuracy of the results. Please make sure that \
your algorithm returns output in the specified format and accepts inputs in \
the specified format. Please also provide an explanation of how your method \
works. You may use any commands or code (such as code found on the web), but \
please document the source(s) of this external code. I will be happy to \
discuss general strategies, so please bring your questions to class."
}], "Text",
 CellChangeTimes->{{3.716385393146195*^9, 3.716385492333248*^9}},
 ExpressionUUID -> "06778756-5323-4715-9b80-f2f3b883070d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Our Solution", "Section",
 CellChangeTimes->{{3.718313145034782*^9, 3.718313147722707*^9}, {
  3.718726578589106*^9, 3.7187265790061913`*^9}}],

Cell[CellGroupData[{

Cell["Cleaning the input (pre-processing)", "Subsection",
 CellChangeTimes->{{3.718319916029214*^9, 3.7183199271194077`*^9}, {
  3.7187265803491006`*^9, 3.7187265860933433`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"cleanImage", "[", "pixels_", "]"}], " ", ":=", " ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"pixels", "[", 
        RowBox[{"[", "1", "]"}], "]"}], " ", ">", 
       RowBox[{".5", "*", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{"pixels", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "+", 
          RowBox[{"pixels", "[", 
           RowBox[{"[", "3", "]"}], "]"}]}], ")"}]}]}], " ", "&&", " ", 
      RowBox[{
       RowBox[{"pixels", "[", 
        RowBox[{"[", "2", "]"}], "]"}], " ", "<", " ", 
       RowBox[{"128", "/", "255"}]}], " ", "&&", " ", 
      RowBox[{
       RowBox[{"pixels", "[", 
        RowBox[{"[", "3", "]"}], "]"}], " ", "<", " ", 
       RowBox[{"122", "/", "255"}]}], "&&", 
      RowBox[{
       RowBox[{"pixels", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ">", 
       RowBox[{"1.3766", "*", 
        RowBox[{"pixels", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}]}], "&&", 
      RowBox[{
       RowBox[{"pixels", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ">", 
       RowBox[{"40", "/", "255"}]}]}], ",", " ", "1", ",", " ", "0"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.718716094111224*^9, {3.7187161378957195`*^9, 3.7187161707752485`*^9}, {
   3.7187163049101133`*^9, 3.7187163506676106`*^9}, {3.718717533447903*^9, 
   3.7187175360680623`*^9}, {3.718717581222333*^9, 3.7187175813522964`*^9}, {
   3.7187176938367786`*^9, 3.7187177251565576`*^9}, {3.7187178406562386`*^9, 
   3.718717871831626*^9}, {3.7187179329710627`*^9, 3.7187179333711147`*^9}, {
   3.7187180867665367`*^9, 3.718718089246748*^9}, 3.718718119966917*^9, {
   3.718718150582294*^9, 3.7187181746434793`*^9}, {3.7187182056983905`*^9, 
   3.7187182490897675`*^9}, {3.7187182848076134`*^9, 
   3.7187183161852913`*^9}, {3.718718360885759*^9, 3.718718462897296*^9}, {
   3.7187185708970213`*^9, 3.718718570967023*^9}, {3.718718644795377*^9, 
   3.7187186458554955`*^9}, {3.718718854870122*^9, 3.7187189053173995`*^9}, {
   3.7187189488069763`*^9, 3.718718973093446*^9}, 3.7187190130256357`*^9, {
   3.7187190467660093`*^9, 3.7187190480760546`*^9}, {3.718719233665724*^9, 
   3.71871923479582*^9}, {3.718719281770754*^9, 3.7187193122504644`*^9}, {
   3.718719385940572*^9, 3.718719388251755*^9}, {3.7187211252192955`*^9, 
   3.7187211374493113`*^9}, {3.7187212272484455`*^9, 3.718721229570857*^9}, {
   3.718721464147027*^9, 3.718721484984363*^9}, {3.7187215379908285`*^9, 
   3.7187215380208282`*^9}, {3.7187227747470713`*^9, 3.718722774887108*^9}, {
   3.718722846207647*^9, 3.7187228464976635`*^9}, {3.7187229343274302`*^9, 
   3.7187229344673834`*^9}, {3.7187229887184734`*^9, 3.718723018647048*^9}, {
   3.7187254245804787`*^9, 3.718725446704231*^9}, {3.718725518179344*^9, 
   3.718725518529394*^9}, {3.718725627605194*^9, 3.718725627695223*^9}, {
   3.7187257305819845`*^9, 3.7187257314820113`*^9}, {3.7187258595237513`*^9, 
   3.718725859743765*^9}, {3.718725894343671*^9, 3.71872589777373*^9}, {
   3.718726614047418*^9, 3.718726614366643*^9}, {3.7187285310106883`*^9, 
   3.718728545813529*^9}, {3.7187297078861513`*^9, 3.718729708469533*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "This", " ", "method", " ", "takes", " ", "in", " ", "an", " ", "image", 
   " ", "as", " ", "a", " ", "2", "D", " ", "array", " ", "of", " ", "pixels",
    " ", "and", " ", "compares", " ", "their", " ", "RGB", " ", 
   RowBox[{"values", ".", " ", 
    RowBox[{"Note", ":", " ", 
     RowBox[{
     "Our", " ", "aim", " ", "here", " ", "is", " ", "to", " ", "isolate", 
      " ", "shades", " ", "of", " ", 
      RowBox[{"red", "."}]}]}]}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.718313305841329*^9, 3.718313358223728*^9}, {
  3.718313609162242*^9, 3.718313647489756*^9}, {3.718730229418625*^9, 
  3.7187302503388305`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Routine for locating stop signs", "Subsection",
 CellChangeTimes->{{3.7186633674761505`*^9, 3.7186633822748213`*^9}, {
  3.718678674577434*^9, 3.71867867872159*^9}, {3.71872663270014*^9, 
  3.7187266489553213`*^9}, {3.7187275812057843`*^9, 3.718727583799588*^9}, {
  3.7187276456528893`*^9, 3.718727645877045*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RoumenBusheyRoutine", "[", "fileName_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "img", ",", " ", "pic", ",", "closedImg", ",", " ", "objectCount", ",", 
       " ", "conciseImg", ",", " ", "tooManyItr", ",", "largestObj", ",", " ",
        "smallestObj", ",", " ", "temporary", ",", " ", "numIter", ",", " ", 
       "currentCount", ",", " ", "openedLargest", ",", " ", "openedSmallest", 
       ",", " ", "position1", ",", " ", "position2", ",", " ", "pvpForBig", 
       ",", " ", "pvpForSmall", ",", " ", "middleForSmall", ",", " ", 
       "middleForBig", ",", " ", "xDifference", ",", " ", "yDifference", ",", 
       "largestOpen", ",", "smallestOpen", ",", "largestOpenCenter", ",", 
       "smallestOpenCenter", ",", "smallestOpenSize", ",", 
       "largestOpenSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"img", "=", 
       RowBox[{"Import", "[", "fileName", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"img", " ", "=", " ", 
       RowBox[{"ImageMultiply", "[", 
        RowBox[{
         RowBox[{"ImageApply", "[", 
          RowBox[{"cleanImage", ",", " ", "img"}], "]"}], ",", " ", "img"}], 
        "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
       "We", " ", "multiply", " ", "the", " ", "result", " ", "of", " ", 
        "the", " ", "cleaning", " ", "by", " ", "the", " ", "original", " ", 
        "image", " ", "to", " ", "maintain", " ", "the", " ", "original", " ", 
        RowBox[{"coloring", "."}]}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"pic", " ", "=", " ", 
       RowBox[{"DeleteSmallComponents", "[", 
        RowBox[{"img", ",", " ", "60"}], "]"}]}], ";", " ", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "To", " ", "get", " ", "rid", " ", "of", " ", "some", " ", "noise"}], 
        ",", " ", 
        RowBox[{
        "but", " ", "not", " ", "affect", " ", "our", " ", "stop", " ", 
         "signs"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"closedImg", " ", "=", "pic"}], ";", "\[IndentingNewLine]", 
      RowBox[{"objectCount", " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", 
         RowBox[{"ComponentMeasurements", "[", 
          RowBox[{"closedImg", ",", " ", "\"\<Count\>\""}], "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"conciseImg", "=", "closedImg"}], ";", "\[IndentingNewLine]", 
      RowBox[{"tooManyItr", "=", "0"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
         RowBox[{"If", " ", "objectCount"}], " ", ">", " ", "2"}], ",", " ", 
        RowBox[{"we", " ", 
         RowBox[{"haven", "'"}], "t", " ", "definitively", " ", "cut", " ", 
         "the", " ", "number", " ", "of", " ", "shapes", " ", "down", " ", 
         "enough", " ", "yet"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"objectCount", " ", ">", " ", "2"}], ",", " ", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"conciseImg", " ", "=", " ", 
           RowBox[{"DeleteSmallComponents", "[", 
            RowBox[{"conciseImg", ",", " ", 
             RowBox[{"Method", "\[Rule]", "\"\<Mean\>\""}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"conciseImg", "=", 
           RowBox[{"DeleteSmallComponents", "[", 
            RowBox[{"conciseImg", ",", "136"}], "]"}]}], ";", " ", 
          RowBox[{"(*", 
           RowBox[{"Delete", " ", "me", " ", "if", " ", "broken"}], "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"objectCount", " ", "=", " ", 
           RowBox[{
            RowBox[{"Dimensions", "[", 
             RowBox[{"ComponentMeasurements", "[", 
              RowBox[{"conciseImg", ",", " ", "\"\<Count\>\""}], "]"}], "]"}],
             "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"tooManyItr", "++"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"tooManyItr", "\[GreaterEqual]", "7"}], ",", 
            RowBox[{"objectCount", "=", "0"}], ",", " ", 
            RowBox[{"objectCount", " ", "=", " ", "objectCount"}]}], "]"}], 
          ";"}]}], " ", 
        RowBox[{"(*", 
         RowBox[{"No", " ", "stop", " ", "signs"}], "*)"}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"objectCount", " ", "\[Equal]", " ", "0"}], ",", " ", 
         RowBox[{"Return", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "0"}], 
            "}"}], "]"}], "]"}], ",", " ", 
         RowBox[{"objectCount", " ", "=", " ", "objectCount"}]}], "]"}]}], 
      ";", " ", 
      RowBox[{"(*", 
       RowBox[{"No", " ", "stop", " ", "signs"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"At", " ", "this", " ", "point"}], ",", " ", 
        RowBox[{
        "we", " ", "have", " ", "conciseImg", " ", "containing", " ", "just", 
         " ", "the", " ", "last", " ", "biggest", " ", 
         RowBox[{"shapes", ".", " ", "We"}], " ", "use", " ", "2", " ", 
         "because", " ", "we", " ", "assume", " ", "at", " ", "most", " ", 
         "2", " ", "stop", " ", "signs", " ", "in", " ", "a", " ", "single", 
         " ", "picture"}]}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"conciseImg", "=", " ", 
       RowBox[{"DeleteSmallComponents", "[", 
        RowBox[{"conciseImg", ",", "71"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"largestObj", " ", "=", " ", 
       RowBox[{"DeleteSmallComponents", "[", 
        RowBox[{"conciseImg", ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<Mean\>\""}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"smallestObj", " ", "=", " ", 
       RowBox[{"ImageDifference", "[", 
        RowBox[{"conciseImg", ",", " ", "largestObj"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Do", " ", "a", " ", "quick", " ", "swap", " ", "of", " ", "what", 
         " ", "the", " ", "variables", " ", "correspond", " ", "to"}], ",", 
        " ", 
        RowBox[{
        "if", " ", "it", " ", "turns", " ", "out", " ", "one", " ", "was", 
         " ", "empty"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"temporary", "=", " ", "smallestObj"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Dimensions", "[", 
          RowBox[{"ComponentMeasurements", "[", 
           RowBox[{"largestObj", ",", "\"\<Count\>\""}], "]"}], "]"}], 
         "\[Equal]", 
         RowBox[{"{", "0", "}"}]}], ",", 
        RowBox[{
         RowBox[{"temporary", "=", "smallestObj"}], ";", " ", 
         RowBox[{"smallestObj", "=", "largestObj"}], ";", " ", 
         RowBox[{"largestObj", "=", " ", "temporary"}]}], ",", 
        RowBox[{"pvpForBig", "=", "pvpForBig"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"numIter", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
      RowBox[{"currentCount", " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", 
         RowBox[{"ComponentMeasurements", "[", 
          RowBox[{"largestObj", ",", " ", "\"\<Count\>\""}], "]"}], "]"}], 
        "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"openedLargest", " ", "=", 
       RowBox[{"Opening", "[", 
        RowBox[{"largestObj", ",", " ", "numIter"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Perform", " ", "the", " ", "opening", " ", "until", " ", "the", " ", 
         "object", " ", "splits", " ", "into", " ", "2", " ", "separate", " ",
          "pieces"}], ",", " ", 
        RowBox[{"or", " ", "is", " ", "destroyed"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"currentCount", " ", "\[NotEqual]", " ", "2"}], " ", "&&", 
         " ", 
         RowBox[{"currentCount", " ", "\[NotEqual]", " ", "0"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"openedLargest", " ", "=", " ", 
          RowBox[{"Opening", "[", 
           RowBox[{"largestObj", ",", " ", "numIter"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"openedLargest", "=", 
          RowBox[{"DeleteSmallComponents", "[", 
           RowBox[{"openedLargest", ",", "48"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"currentCount", "=", " ", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"ComponentMeasurements", "[", 
             RowBox[{"openedLargest", ",", " ", "\"\<Count\>\""}], "]"}], 
            "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"numIter", "++"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"numIter", "\[GreaterEqual]", "7"}], ",", 
           RowBox[{"currentCount", "=", "0"}], ",", " ", 
           RowBox[{"currentCount", " ", "=", " ", "currentCount"}]}], "]"}], 
         ";"}]}], " ", 
       RowBox[{"(*", 
        RowBox[{"No", " ", "stop", " ", "signs"}], "*)"}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"No", " ", "stop", " ", "signs", " ", 
        RowBox[{"found", " ", ":", 
         RowBox[{"(", " "}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"currentCount", " ", "\[Equal]", " ", "0"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "0"}], "}"}],
           "]"}], "]"}], ",", " ", 
        RowBox[{"currentCount", " ", "=", " ", "currentCount"}]}], "]"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Separate", " ", "parts", " ", "of", " ", "opened"}], "-", 
        RowBox[{
        "up", " ", "stop", " ", "signs", " ", "into", " ", "largest", " ", 
         "and", " ", "smallest", " ", "pieces"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"largestOpen", " ", "=", 
       RowBox[{"DeleteSmallComponents", "[", 
        RowBox[{"openedLargest", ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<Mean\>\""}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"smallestOpen", " ", "=", " ", 
       RowBox[{"ImageDifference", "[", 
        RowBox[{"openedLargest", ",", " ", "largestOpen"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"largestOpenCenter", " ", "=", " ", 
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{"largestOpen", ",", " ", "\"\<Centroid\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"smallestOpenCenter", " ", "=", " ", 
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{"smallestOpen", ",", " ", "\"\<Centroid\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "Since", " ", "we", " ", "broke", " ", "the", " ", "object", " ", 
         "into", " ", "two", " ", "pieces"}], ",", " ", 
        RowBox[{
        "we", " ", "check", " ", "to", " ", "make", " ", "sure", " ", "the", 
         " ", "parts", " ", "are", " ", "aligned", " ", "on", " ", "top", " ",
          "of", " ", "each", " ", "other", " ", "rather", " ", "then", " ", 
         "side", " ", "by", " ", "side"}]}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"position1", "=", " ", 
       RowBox[{
        RowBox[{"largestOpenCenter", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"position2", "=", 
       RowBox[{
        RowBox[{"smallestOpenCenter", " ", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"xDifference", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{
         RowBox[{"position1", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "-", " ", 
         RowBox[{"position2", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"yDifference", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{
         RowBox[{"position1", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "-", " ", 
         RowBox[{"position2", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"xDifference", " ", ">", " ", "yDifference"}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "0"}], "}"}],
           "]"}], "]"}], ",", " ", 
        RowBox[{"xDifference", " ", "=", " ", "xDifference"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"largestOpenSize", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"ComponentMeasurements", "[", 
          RowBox[{"largestOpen", ",", " ", "\"\<Count\>\""}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"smallestOpenSize", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"ComponentMeasurements", "[", 
          RowBox[{"smallestOpen", ",", " ", "\"\<Count\>\""}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "If", " ", "the", " ", "two", " ", "pieces", " ", "are", " ", "very", 
         " ", "different", " ", "in", " ", "scale"}], ",", " ", 
        RowBox[{"we", " ", "know", " ", "it", " ", 
         RowBox[{"can", "'"}], "t", " ", "have", " ", "been", " ", "a", " ", 
         "stop", " ", "sign"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"largestOpenSize", " ", ">", 
         RowBox[{"3", "*", "smallestOpenSize"}]}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "0"}], "}"}],
           "]"}], "]"}], ",", " ", 
        RowBox[{"smallestOpenSize", "=", "smallestOpenSize"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Use", " ", "the", " ", "median", " ", "value", " ", "of", " ", "red", 
        " ", "in", " ", "the", " ", "picure", " ", "to", " ", "figure", " ", 
        "out", " ", "where", " ", "the", " ", "stop", " ", "sign", " ", "is", 
        " ", "located"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"pvpForBig", "=", 
       RowBox[{"PixelValuePositions", "[", 
        RowBox[{"largestObj", ",", "Red", ",", ".7"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"middleForBig", "=", 
       RowBox[{"Round", "[", 
        RowBox[{"Median", "[", "pvpForBig", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Dimensions", "[", 
           RowBox[{"ComponentMeasurements", "[", 
            RowBox[{
             RowBox[{"DeleteSmallComponents", "[", 
              RowBox[{"smallestObj", ",", "87"}], "]"}], ",", 
             "\"\<Count\>\""}], "]"}], "]"}], "\[Equal]", 
          RowBox[{"{", "0", "}"}]}], "||", 
         RowBox[{
          RowBox[{"Dimensions", "[", 
           RowBox[{"ComponentMeasurements", "[", 
            RowBox[{
             RowBox[{"DeleteSmallComponents", "[", 
              RowBox[{"smallestObj", ",", "87"}], "]"}], ",", 
             "\"\<Count\>\""}], "]"}], "]"}], "\[Equal]", 
          RowBox[{"{", "}"}]}]}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "1", ",", 
            "middleForBig"}], "}"}], "]"}], "]"}], ",", 
        RowBox[{"pvpForBig", "=", "pvpForBig"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "DO", " ", "EVERYTHING", " ", "AGAIN", " ", "FOR", " ", "THE", " ", 
        "SMALLER", " ", "OBJECT"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"currentCount", " ", "=", " ", 
       RowBox[{
        RowBox[{"Dimensions", "[", 
         RowBox[{"ComponentMeasurements", "[", 
          RowBox[{"smallestObj", ",", " ", "\"\<Count\>\""}], "]"}], "]"}], 
        "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"openedSmallest", " ", "=", 
       RowBox[{"Opening", "[", 
        RowBox[{"smallestObj", ",", " ", "numIter"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"numIter", " ", "=", "0"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Perform", " ", "the", " ", "opening", " ", "until", " ", "the", " ", 
         "object", " ", "splits", " ", "into", " ", "2", " ", "separate", " ",
          "pieces"}], ",", " ", 
        RowBox[{"or", " ", "is", " ", "destroyed"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"currentCount", " ", "\[NotEqual]", " ", "2"}], " ", "&&", 
         " ", 
         RowBox[{"currentCount", " ", "\[NotEqual]", " ", "0"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"openedSmallest", "=", " ", 
          RowBox[{"Opening", "[", 
           RowBox[{"smallestObj", ",", " ", "numIter"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"openedSmallest", "=", 
          RowBox[{"DeleteSmallComponents", "[", 
           RowBox[{"openedSmallest", ",", "35"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"currentCount", "=", " ", 
          RowBox[{
           RowBox[{"Dimensions", "[", 
            RowBox[{"ComponentMeasurements", "[", 
             RowBox[{"openedSmallest", ",", " ", "\"\<Count\>\""}], "]"}], 
            "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"numIter", "++"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"numIter", "\[GreaterEqual]", "6"}], ",", 
           RowBox[{"currentCount", "=", "0"}], ",", " ", 
           RowBox[{"currentCount", " ", "=", " ", "currentCount"}]}], "]"}], 
         ";"}]}], " ", 
       RowBox[{"(*", 
        RowBox[{"No", " ", "stop", " ", "signs"}], "*)"}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"No", " ", "stop", " ", "signs", " ", 
        RowBox[{"found", " ", ":", 
         RowBox[{"(", " "}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"currentCount", " ", "\[Equal]", " ", "0"}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "1", ",", 
            "middleForBig"}], "}"}], "]"}], "]"}], ",", " ", 
        RowBox[{"currentCount", " ", "=", " ", "currentCount"}]}], "]"}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "Separate", " ", "parts", " ", "of", " ", "opened", " ", "up", " ", 
        "stop", " ", "signs", " ", "into", " ", "largest", " ", "and", " ", 
        "smallest", " ", "pieces"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"largestOpen", " ", "=", 
       RowBox[{"DeleteSmallComponents", "[", 
        RowBox[{"openedSmallest", ",", " ", 
         RowBox[{"Method", "\[Rule]", "\"\<Mean\>\""}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"smallestOpen", " ", "=", " ", 
       RowBox[{"ImageDifference", "[", 
        RowBox[{"openedSmallest", ",", " ", "largestOpen"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"largestOpenCenter", " ", "=", " ", 
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{"largestOpen", ",", " ", "\"\<Centroid\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"smallestOpenCenter", " ", "=", " ", 
       RowBox[{"ComponentMeasurements", "[", 
        RowBox[{"smallestOpen", ",", " ", "\"\<Centroid\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "Since", " ", "we", " ", "broke", " ", "the", " ", "object", " ", 
         "into", " ", "two", " ", "pieces"}], ",", " ", 
        RowBox[{
        "we", " ", "check", " ", "to", " ", "make", " ", "sure", " ", "it", 
         " ", 
         RowBox[{"doesn", "'"}], "t", " ", "look", " ", 
         "\"\<too square\>\""}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"position1", "=", " ", 
       RowBox[{
        RowBox[{"largestOpenCenter", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"position2", "=", 
       RowBox[{
        RowBox[{"smallestOpenCenter", " ", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"xDifference", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{
         RowBox[{"position1", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "-", " ", 
         RowBox[{"position2", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"yDifference", " ", "=", " ", 
       RowBox[{"Abs", "[", 
        RowBox[{
         RowBox[{"position1", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "-", " ", 
         RowBox[{"position2", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"xDifference", " ", ">", " ", "yDifference"}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "1", ",", 
            "middleForBig"}], "}"}], "]"}], "]"}], ",", " ", 
        RowBox[{"xDifference", " ", "=", " ", "xDifference"}]}], "]"}], ";", 
      " ", 
      RowBox[{"(*", 
       RowBox[{"{", 
        RowBox[{"1", ",", "middleForBig"}], "}"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"largestOpenSize", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"ComponentMeasurements", "[", 
          RowBox[{"largestOpen", ",", " ", "\"\<Count\>\""}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"smallestOpenSize", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"ComponentMeasurements", "[", 
          RowBox[{"smallestOpen", ",", " ", "\"\<Count\>\""}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "If", " ", "the", " ", "two", " ", "pieces", " ", "are", " ", "very", 
         " ", "different", " ", "in", " ", "scale"}], ",", " ", 
        RowBox[{"we", " ", "know", " ", "it", " ", 
         RowBox[{"can", "'"}], "t", " ", "have", " ", "been", " ", "a", " ", 
         "stop", " ", "sign"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"largestOpenSize", " ", ">", 
         RowBox[{"3", "*", "smallestOpenSize"}]}], ",", " ", 
        RowBox[{"Return", "[", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "0"}], "}"}],
           "]"}], "]"}], ",", " ", 
        RowBox[{"smallestOpenSize", "=", "smallestOpenSize"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Do", " ", "the", " ", "same", " ", "for", " ", "the", " ", 
         "smallestObj", " ", "as", " ", "we", " ", "did", " ", "for", " ", 
         "largestObj"}], ",", " ", 
        RowBox[{"if", " ", "it", " ", "exists"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"pvpForSmall", "=", 
       RowBox[{"PixelValuePositions", "[", 
        RowBox[{"smallestObj", ",", "Red", ",", ".5"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"middleForSmall", "=", 
       RowBox[{"Round", "[", 
        RowBox[{"Median", "[", "pvpForSmall", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"If", " ", 
         RowBox[{"we", "'"}], "ve", " ", "made", " ", "it", " ", "here"}], 
        ",", " ", 
        RowBox[{
         RowBox[{
         "we", " ", "know", " ", "we", " ", "must", " ", "have", " ", "two", 
          " ", "values"}], ";", " ", 
         RowBox[{
         "so", " ", "go", " ", "ahead", " ", "and", " ", "return", " ", 
          "them"}]}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"FileBaseName", "[", "fileName", "]"}], ",", "2", ",", 
          "middleForBig", ",", " ", "middleForSmall"}], "}"}], "]"}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7186632148145866`*^9, 3.7186632207987175`*^9}, {
   3.71866340140343*^9, 3.7186634371246843`*^9}, {3.718663536522128*^9, 
   3.7186636958445497`*^9}, {3.7186637444524236`*^9, 
   3.7186637701979704`*^9}, {3.718663826273944*^9, 3.7186638867698326`*^9}, {
   3.718663921345251*^9, 3.7186639486787157`*^9}, {3.7186640069418297`*^9, 
   3.7186640334690294`*^9}, {3.7186641501500816`*^9, 3.718664239288333*^9}, {
   3.7186642951953382`*^9, 3.718664370638047*^9}, {3.718665011770381*^9, 
   3.718665032825962*^9}, {3.718665091450324*^9, 3.7186651237458487`*^9}, 
   3.718666995861905*^9, {3.7186670511411867`*^9, 3.7186670853639603`*^9}, {
   3.7186671695413136`*^9, 3.718667184021967*^9}, {3.7186675921974173`*^9, 
   3.718667592245916*^9}, {3.7186678136091547`*^9, 3.718667873577468*^9}, {
   3.7186683934456396`*^9, 3.718668404405876*^9}, {3.718668606337826*^9, 
   3.718668607448183*^9}, {3.7186687236858854`*^9, 3.7186687271734076`*^9}, {
   3.718671178823995*^9, 3.7186711813819304`*^9}, {3.718674440836095*^9, 
   3.718674485330826*^9}, {3.7186745197719116`*^9, 3.7186745259712825`*^9}, {
   3.7186745561403713`*^9, 3.7186745825363245`*^9}, {3.718674655952696*^9, 
   3.718674783084869*^9}, {3.7186748166125793`*^9, 3.7186749083639135`*^9}, {
   3.7186749437147956`*^9, 3.7186749752062445`*^9}, {3.718675021210922*^9, 
   3.7186751128310995`*^9}, {3.7186751631457663`*^9, 3.71867535342968*^9}, {
   3.718675400370195*^9, 3.7186755027502437`*^9}, {3.718675971757102*^9, 
   3.718676002308365*^9}, {3.7186771267312355`*^9, 3.718677207826182*^9}, {
   3.7186773093195443`*^9, 3.7186773261204586`*^9}, {3.7186774327595186`*^9, 
   3.7186774557238035`*^9}, {3.718677521231389*^9, 3.7186775217198815`*^9}, {
   3.7186779103598833`*^9, 3.7186779161414146`*^9}, {3.718678377193612*^9, 
   3.718678378066947*^9}, {3.718678421199487*^9, 3.71867844217585*^9}, {
   3.7186791581901994`*^9, 3.718679162474864*^9}, {3.7186792337838693`*^9, 
   3.718679343590917*^9}, {3.718679437486899*^9, 3.7186794527407312`*^9}, {
   3.7186796234599056`*^9, 3.7186796473361797`*^9}, {3.718679715171097*^9, 
   3.718679715230111*^9}, 3.718680268312853*^9, 3.7186803171812596`*^9, {
   3.718680777825817*^9, 3.7186808076163363`*^9}, {3.7186810013272557`*^9, 
   3.7186810020697412`*^9}, {3.71868126910389*^9, 3.718681273580973*^9}, {
   3.7186814382706456`*^9, 3.7186814543378005`*^9}, {3.718681518961664*^9, 
   3.7186815774182463`*^9}, {3.718681845553425*^9, 3.7186818755535803`*^9}, {
   3.7186819198010144`*^9, 3.7186819238758097`*^9}, {3.718711164960313*^9, 
   3.7187112372030106`*^9}, {3.718711306152193*^9, 3.7187113580712886`*^9}, {
   3.71871142356635*^9, 3.7187115384080715`*^9}, {3.7187115744473076`*^9, 
   3.7187116234173737`*^9}, {3.7187116611410418`*^9, 3.718711716906294*^9}, {
   3.718711749430491*^9, 3.7187117621081095`*^9}, {3.7187121921122108`*^9, 
   3.718712203361483*^9}, {3.7187128109126325`*^9, 3.7187128131746674`*^9}, {
   3.718713186103753*^9, 3.7187133032020164`*^9}, {3.7187134025924253`*^9, 
   3.7187134158912463`*^9}, {3.7187134751029377`*^9, 
   3.7187134826076736`*^9}, {3.7187135495666494`*^9, 
   3.7187135658088818`*^9}, {3.718714828472581*^9, 3.718714879375121*^9}, {
   3.7187149124331007`*^9, 3.718714979786632*^9}, {3.7187151361014075`*^9, 
   3.7187151372014403`*^9}, {3.7187152681321774`*^9, 
   3.7187153245709896`*^9}, {3.7187158582334166`*^9, 3.718715889212449*^9}, {
   3.718715969418264*^9, 3.718715975951193*^9}, {3.7187164959882317`*^9, 
   3.7187164998284535`*^9}, {3.7187165942303467`*^9, 
   3.7187166733230205`*^9}, {3.7187167306880713`*^9, 3.718716733168206*^9}, {
   3.7187172565773697`*^9, 3.7187172716523905`*^9}, {3.7187196897100782`*^9, 
   3.71871969769905*^9}, {3.7187197866687207`*^9, 3.718719791499441*^9}, {
   3.718719847628942*^9, 3.718719873138942*^9}, {3.7187200095569215`*^9, 
   3.7187200149032884`*^9}, {3.718720139042656*^9, 3.7187202117371635`*^9}, {
   3.7187202861599445`*^9, 3.718720369326412*^9}, 3.7187203996953955`*^9, {
   3.7187204737158413`*^9, 3.7187204849079742`*^9}, {3.718720566686842*^9, 
   3.718720574247427*^9}, {3.7187206086353426`*^9, 3.718720612045576*^9}, {
   3.718720657068321*^9, 3.718720695260028*^9}, {3.7187208370431137`*^9, 
   3.718720862972686*^9}, {3.7187209269141426`*^9, 3.718720930220253*^9}, 
   3.718722025796425*^9, {3.71872243337427*^9, 3.7187224334242706`*^9}, {
   3.718723232655958*^9, 3.718723259095685*^9}, {3.7187233714043097`*^9, 
   3.7187233888190455`*^9}, {3.718723504782424*^9, 3.718723521288423*^9}, 
   3.718723567014052*^9, {3.718723758759466*^9, 3.7187237599095364`*^9}, {
   3.7187241825138307`*^9, 3.718724228884244*^9}, {3.7187242900958924`*^9, 
   3.7187243690830593`*^9}, {3.718724809617921*^9, 3.7187248228283367`*^9}, 
   3.718724875388706*^9, {3.7187249693500357`*^9, 3.718725019081797*^9}, {
   3.7187251622487884`*^9, 3.718725163848885*^9}, {3.718726061038456*^9, 
   3.7187260614184513`*^9}, {3.718726684654683*^9, 3.718726712825918*^9}, 
   3.7187267463277783`*^9, {3.7187268386247964`*^9, 3.7187269202390113`*^9}, 
   3.718727011793076*^9, 3.7187270462369237`*^9, {3.718727087571407*^9, 
   3.7187272168987503`*^9}, {3.718727247215642*^9, 3.7187274945465403`*^9}, {
   3.718727630098076*^9, 3.7187276362813916`*^9}, {3.7187278242292385`*^9, 
   3.718727832917224*^9}, {3.718727901533468*^9, 3.718727961235606*^9}, {
   3.7187280049757347`*^9, 3.7187280248924494`*^9}, {3.7187280970201435`*^9, 
   3.7187281202401223`*^9}, {3.7187281564790816`*^9, 
   3.7187283078623676`*^9}, {3.718728464439573*^9, 3.718728498090906*^9}, {
   3.718729079831257*^9, 3.718729086823144*^9}, 3.718729952651101*^9, {
   3.718730254853098*^9, 3.7187302599828253`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Viewing the output", "Subsection",
 CellChangeTimes->{{3.7183203584302235`*^9, 3.718320371885689*^9}, {
  3.718728417014923*^9, 3.7187284201330457`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"output", " ", "=", " ", 
   RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"RoumenBusheyRoutine", "[", 
       RowBox[{"allPics", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "[", "allPics", "]"}]}], "}"}]}], "]"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7187287721343737`*^9, 3.718728794550792*^9}, {
  3.718728827288368*^9, 3.718728830143321*^9}, {3.7187288985245047`*^9, 
  3.7187289069252925`*^9}, {3.718729215453304*^9, 3.718729219204908*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"timing", " ", "=", " ", 
  RowBox[{"output", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ColtonGuhaResults", " ", "=", " ", 
  RowBox[{
   RowBox[{"Rest", "[", "output", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7187291034466743`*^9, 3.718729164086584*^9}, {
  3.7187292239121943`*^9, 3.718729243814044*^9}, {3.7187293685321383`*^9, 
  3.718729384636325*^9}},
 NumberMarks->False],

Cell[BoxData["50.44325856246985`"], "Output",
 CellChangeTimes->{
  3.718729323787015*^9, {3.7187293736786966`*^9, 3.7187293851896987`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"signImage20\"\>", ",", "1", ",", "74", ",", "128"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage22\"\>", ",", "2", ",", "149", ",", "49", ",", 
     "149", ",", "110"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage24\"\>", ",", "1", ",", "62", ",", "122"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage26\"\>", ",", "1", ",", "175", ",", "111"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage28\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage30\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage32\"\>", ",", "1", ",", "89", ",", "119"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage34\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage36\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage38\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage40\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage42\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage44\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage46\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage48\"\>", ",", "1", ",", "142", ",", "28"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage50\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage52\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage54\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage56\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage58\"\>", ",", "1", ",", "213", ",", "85"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage60\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage62\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage64\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage66\"\>", ",", "1", ",", "239", ",", "122"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage68\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage70\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage72\"\>", ",", "1", ",", "52", ",", "128"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage74\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage76\"\>", ",", "2", ",", "64", ",", "193", ",", 
     "145", ",", "165"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage78\"\>", ",", "1", ",", "40", ",", "94"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage80\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage82\"\>", ",", "1", ",", "221", ",", "137"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage84\"\>", ",", "1", ",", "124", ",", "132"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage86\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage88\"\>", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage90\"\>", ",", "1", ",", "224", ",", "122"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage92\"\>", ",", "1", ",", "194", ",", "106"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage94\"\>", ",", "2", ",", "243", ",", "124", ",", 
     "75", ",", "98"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"signImage96\"\>", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.718729323787015*^9, {3.7187293736786966`*^9, 3.7187293851957026`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 1108},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 248, 5, 203, "Title"],
Cell[CellGroupData[{
Cell[853, 31, 211, 3, 70, "Section"],
Cell[1067, 36, 351, 6, 49, "Text"],
Cell[CellGroupData[{
Cell[1443, 46, 216, 3, 30, "Input"],
Cell[1662, 51, 952, 20, 30, "Output"]
}, Open  ]],
Cell[2629, 74, 736, 11, 87, "Text"],
Cell[CellGroupData[{
Cell[3390, 89, 886, 20, 50, "Input"],
Cell[4279, 111, 6626, 122, 753, "Output"]
}, Open  ]],
Cell[10920, 236, 165, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[11110, 243, 241, 5, 30, "Input"],
Cell[11354, 250, 118619, 1948, 191, "Output"]
}, Open  ]],
Cell[129988, 2201, 1049, 19, 296, "Text"],
Cell[131040, 2222, 1195, 31, 126, "Input"],
Cell[132238, 2255, 414, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[132677, 2266, 253, 5, 30, "Input"],
Cell[132933, 2273, 553, 10, 30, "Output"]
}, Open  ]],
Cell[133501, 2286, 625, 10, 68, "Text"],
Cell[CellGroupData[{
Cell[134151, 2300, 3905, 104, 202, "Input"],
Cell[138059, 2406, 3953, 102, 164, "Output"]
}, Open  ]],
Cell[142027, 2511, 640, 10, 68, "Text"],
Cell[CellGroupData[{
Cell[142692, 2525, 415, 10, 30, "Input"],
Cell[143110, 2537, 4460, 124, 202, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147607, 2666, 341, 8, 30, "Input"],
Cell[147951, 2676, 4554, 126, 202, "Output"]
}, Open  ]],
Cell[152520, 2805, 464, 9, 49, "Text"],
Cell[152987, 2816, 827, 13, 106, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153851, 2834, 148, 2, 70, "Section"],
Cell[CellGroupData[{
Cell[154024, 2840, 178, 2, 49, "Subsection"],
Cell[154205, 2844, 3184, 62, 69, "Input"],
Cell[157392, 2908, 671, 14, 50, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158100, 2927, 320, 4, 49, "Subsection"],
Cell[158423, 2933, 32388, 676, 2558, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190848, 3614, 159, 2, 49, "Subsection"],
Cell[191010, 3618, 679, 15, 69, "Input"],
Cell[CellGroupData[{
Cell[191714, 3637, 502, 11, 69, "Input"],
Cell[192219, 3650, 140, 2, 30, "Output"],
Cell[192362, 3654, 3665, 98, 164, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

